<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>操作系统第一章</title>
    <url>/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>关于操作系统的一些基本概念</p>
<a id="more"></a>


        <h2 id="操作系统的概念、功能和目标">
          <a href="#操作系统的概念、功能和目标" class="heading-link"><i class="fas fa-link"></i></a>操作系统的概念、功能和目标</h2>
      
        <h3 id="概念">
          <a href="#概念" class="heading-link"><i class="fas fa-link"></i></a>概念</h3>
      <p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/gainian.png" alt="gainian"></p>
<p>补充：进程是一个程序的执行过程，执行前需要将该程序放在内存中，才能被CPU处理。</p>

        <h3 id="功能和目标">
          <a href="#功能和目标" class="heading-link"><i class="fas fa-link"></i></a>功能和目标</h3>
      <ul>
<li><p>作为系统资源的管理者</p>
<ol>
<li><p>功能 ：1、处理机管理2、存储器管理3、文件管理4、设备管理</p>
</li>
<li><p>目标：安全、高效</p>
</li>
</ol>
</li>
<li><p>作为用户和计算机硬件之间的接口</p>
<ol>
<li><p>功能：1、命令接口（联机命令接口、脱机命令接口）2、程序接口——由一组系统调用组成3、GUI（即图形用户界面）            </p>
</li>
<li><p>目标：方便用户使用</p>
<ul>
<li>命令接口：允许用户直接使用</li>
<li>程序接口：允许用户通过程序简介使用=系统调用=广义指令</li>
<li>GUI：现代操作系统中最流行的图形用户接口</li>
</ul>
</li>
</ol>
</li>
</ul>
<ul>
<li>作为最接近硬件的层次——实现对硬件机器的拓展。</li>
</ul>

        <h2 id="四个特征">
          <a href="#四个特征" class="heading-link"><i class="fas fa-link"></i></a>四个特征</h2>
      <ul>
<li><p>操作系统的特征：并发、共享、虚拟、异步。并发和共享是两个最基本的特征，互为存在条件。</p>
<ol>
<li><p>并发：指两个或多个事件在同一时间间隔发生。这些事件宏观上是同时发生的，但微观上是交替发生的。（并行：指两个或多个事件在同一时刻同时发生。）</p>
</li>
<li><p>共享：即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。</p>
<ul>
<li>两种资源共享方式：1、互斥共享方式——一个时间段内只允许一个进程访问该资源。2、同时共享方式——允许一个时间段内有多个进程“同时”对他们进行访问。</li>
</ul>
</li>
<li><p>虚拟：是指把一个物理上的实体变为若干个逻辑上的对应物，物理实体（前者）是实际存在的，而逻辑上的对应物（后者）是用户感受到的。</p>
<ul>
<li><p>虚拟技术：1、空分复用技术（如虚拟存储器技术）。2、时分复用技术（如虚拟处理器）。</p>
</li>
<li><p>没有并发性，就无虚拟性。</p>
</li>
</ul>
</li>
<li><p>异步：在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，以不可预知的速度向前推进。</p>
<ul>
<li>只有系统拥有并发性，才有可能导致异步。</li>
</ul>
</li>
</ol>
</li>
</ul>

        <h2 id="OS的发展与分类">
          <a href="#OS的发展与分类" class="heading-link"><i class="fas fa-link"></i></a>OS的发展与分类</h2>
      <p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%8F%91%E5%B1%95%E4%B8%8E%E5%88%86%E7%B1%BB.png" alt="发展与分类"></p>
<ol>
<li><p>手工操作阶段</p>
<ul>
<li>主要缺点：用户独占全机，人机速度矛盾导致资源利用率极低。</li>
</ul>
</li>
<li><p>批处理阶段——单道批处理系统</p>
<ul>
<li>引入脱机输入/输出技术（用磁带完成），并监督程序（操作系统的雏形）负责控制作业的输入、输出。</li>
<li>主要优点：缓解了一定程度的人机速度矛盾，资源利用率有所提升。</li>
<li>主要缺点：内存中仅能有一道程序运行，只有该程序运行结束之后才能调入下一道程序。CPU有大量的时间是在空闲等待I/O完成。资源利用率仍然很低。</li>
</ul>
</li>
<li><p>批处理阶段——多道批处理系统</p>
<ul>
<li>主要优点：多道程序并发执行，共享计算机资源。资源利用率大幅提升，CPU和其他资源保持”忙碌”状态，系统吞吐量增大。</li>
<li>主要缺点：用户响应时间长，没有人机交互功能（用户提交自己的作业之后就只能等待计算机处理完成，之间不能控制自己的作业执行）。</li>
</ul>
</li>
<li><p>分时操作系统</p>
<ul>
<li>计算机以时间片为单位轮流为各个用户/作业服务，各个用户可通过终端与计算机进行交互。</li>
<li>主要优点：用户请求可以被及时响应，解决了人机交互问题。允许多个用户同时使用一台计算机，并且用户对计算机的操作相互对立，感受不到别人的存在。</li>
<li>主要缺点：不能优先处理一些紧急任务。操作系统对各个用户/作业都是完全公平的，循环地为每个用户/作业服务一个时间片，不区分任务的紧急性。</li>
</ul>
</li>
<li><p>实时操作系统</p>
<ul>
<li>主要优点：能够优先响应一写紧急任务，某些紧急任务不需时间片排队。</li>
<li>在实时系统的控制下，计算机系统接收到外部信号后及时进行处理，并且要在严格的时限内处理完事件。实时操作系统的主要特点是及时性和可靠性。</li>
<li>实时操作系统分为：1、硬实时系统——必须在绝对严格的规定时间内完成处理（如：导弹控制系统、自动驾驶系统）。2、软实时系统——能接受偶尔违反时间规定（如：12306火车订票系统）。</li>
</ul>
</li>
</ol>
<p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200510170945474.png" alt></p>

        <h2 id="运行机制与体系结构">
          <a href="#运行机制与体系结构" class="heading-link"><i class="fas fa-link"></i></a>运行机制与体系结构</h2>
      <p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200510172130465.png" alt></p>

        <h3 id="运行机制">
          <a href="#运行机制" class="heading-link"><i class="fas fa-link"></i></a>运行机制</h3>
      <ul>
<li>两种指令：1、特权指令：如内存清零指令（不允许用户程序使用。）2、非特权指令：如普通的运算指令。</li>
<li>两种处理器状态（用程序状态字寄存器（PSW）中的某标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态)：1、用户态（目态）——此时CPU只执行非特权指令。2、核心态（管态）——特权指令、非特权指令都可以执行。</li>
<li>两种程序：1、内核程序——是系统的管理者，既可以执行特权指令，也可以执行非特权指令，运行在核心态。2、应用程序——为了保证系统能安全运行，普通应用程序只能执行非特权指令，运行在用户态。</li>
</ul>

        <h3 id="操作系统的内核">
          <a href="#操作系统的内核" class="heading-link"><i class="fas fa-link"></i></a>操作系统的内核</h3>
      <p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200510174105987.png" alt></p>
<p>内核是计算机上配置的底层软件，是操作系统最基本、最核心的部分。实现操作系统内核功能的那些程序就是内核程序。</p>
<p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200510175832130.png" alt></p>

        <h3 id="操作系统的体系结构">
          <a href="#操作系统的体系结构" class="heading-link"><i class="fas fa-link"></i></a>操作系统的体系结构</h3>
      <p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200510180417551.png" alt></p>

        <h2 id="中断和异常">
          <a href="#中断和异常" class="heading-link"><i class="fas fa-link"></i></a>中断和异常</h2>
      
        <h3 id="中断机制的诞生">
          <a href="#中断机制的诞生" class="heading-link"><i class="fas fa-link"></i></a>中断机制的诞生</h3>
      <p>本质：发生中断就意味着需要操作系统介入，开展管理工作。 </p>
<p>为了实现多道程序并发执行而引入的一种技术。</p>

        <h3 id="中断的概念和作用">
          <a href="#中断的概念和作用" class="heading-link"><i class="fas fa-link"></i></a>中断的概念和作用</h3>
      <ol>
<li>当中断发生时，CPU立即进入核心态。</li>
<li>当中断发生后，当前运行的进程短暂运行，并由操作系统内核对中断进行处理。</li>
<li>对于不同的中断信号，会进行不同的处理。</li>
</ol>
<ul>
<li>“用户态—&gt;核心态”是通过中断实现的。并且中断是唯一途径。“核心态—&gt;用户态”的切换是通过执行一个特权指令，将程序状态字（PSW）的标志位设置为“用户态”。</li>
</ul>

        <h3 id="中断的分类">
          <a href="#中断的分类" class="heading-link"><i class="fas fa-link"></i></a>中断的分类</h3>
      <ol>
<li>内中断（也称异常、例外、陷入）：1、自愿中断——指令中断（如：系统调用时使用的访管指令（又叫陷入指令、trap指令））。2、强迫中断——硬件故障（如：缺页）、软件故障（如：整数除0）。<ul>
<li>信号的来源：CPU内部，与当前执行的指令有关。</li>
</ul>
</li>
<li>外中断（中断）：1、外设请求（如：I/O操作完成发出的中断信号）。2、人工干预（如：用户强行终止一个进程）。<ul>
<li>信号的来源：CPU外部，与当前执行的指令无关。</li>
</ul>
</li>
</ol>
<p>另一种分类：</p>
<ol>
<li>内中断（内部异常）：1、陷阱、陷入（trap）——有意而为之的异常，如系统调用。2、故障（fault）——由错误条件引起的，可能被故障处理程序修复，如缺页。3、终止（abort）——不可修复的致命错误造成的结果，终止处理程序不再将控制返回给引发终止的应用程序，如整数除0.<ul>
<li>信号的来源：CPU内部，与当前执行的指令有关。</li>
</ul>
</li>
<li>外中断（中断）：1、I/O中断请求。2、人工干预。<ul>
<li>信号的来源：CPU外部，与当前执行的指令无关。</li>
</ul>
</li>
</ol>

        <h3 id="外中断的处理过程">
          <a href="#外中断的处理过程" class="heading-link"><i class="fas fa-link"></i></a>外中断的处理过程</h3>
      <ol>
<li>执行完每个指令之后，CPU都要检查当前是否有外部中断信号。</li>
<li>如果检测到外部中断信号，则需要保护被中断进程的CPU环境（如程序状态字PSW、程序计数器PC、各种通用寄存器）。</li>
<li>根据中断信号类型转入相应的中断处理程序。</li>
<li>回复原进程的CPU环境并退出中断，返回原进程继续往下执行。</li>
</ol>
<p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8.png" alt></p>

        <h2 id="系统调用">
          <a href="#系统调用" class="heading-link"><i class="fas fa-link"></i></a>系统调用</h2>
      
        <h3 id="什么是系统调用，有何作用">
          <a href="#什么是系统调用，有何作用" class="heading-link"><i class="fas fa-link"></i></a>什么是系统调用，有何作用</h3>
      <ul>
<li><p>概念：“系统调用”是操作系统提供给应用程序（程序员/编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。</p>
</li>
<li><p>作用：应用程序通过系统调用请求操作系统的服务。系统中的各种共享资源都由操作系统统一掌管，因此在用户程序中，愤怒时与资源有关的操作（如存储分配、I/O操作、文件管理等），都必须通过系统调用的方式向操作系统提出服务请求，由操作系统代为完成。这样可以保证系统的稳定性和安全性，防止用户进行非法操作。</p>
</li>
<li><p>系统调用（按功能分类）：1、设备管理——完成设备的请求/释放/启动等功能。2、文件管理——完成文件的读/写/创建/删除等功能。3、进程控制——完成进程的创建/撤销/阻塞/唤醒等功能。4、进程通信——完成进程之间的消息传递/信号传递等功能。5、内存管理——完成内存的分配/回收等功能。</p>
<ul>
<li>系统调用相关处理涉及到对系统资源的管理、对进程的控制，这些功能需要一些特权指令才能完成，因此系统调用的相关处理需要在核心态下进行。</li>
</ul>
</li>
</ul>

        <h3 id="系统调用与库函数的区别">
          <a href="#系统调用与库函数的区别" class="heading-link"><i class="fas fa-link"></i></a>系统调用与库函数的区别</h3>
      <p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200513181703297.png" alt></p>

        <h3 id="系统调用背后的过程">
          <a href="#系统调用背后的过程" class="heading-link"><i class="fas fa-link"></i></a>系统调用背后的过程</h3>
      <p>传递系统调用参数—&gt;执行陷入指令（用户态）—&gt;执行系统调用相应服务程序（核心态）—&gt;返回应用程序</p>
<p>注意：1、陷入指令是在用户态执行的，执行陷入指令之后立即引发一个内中断，从而CPU进入核心态。</p>
<p>2、发出系统调用请求是在用户态，而对系统调用的相应处理在核心态下进行。</p>
<p>3、陷入指令是指唯一一个只能在用户态执行，而不可在核心态执行的指令。</p>
<p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200513222640906.png" alt></p>
<p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200522203546622.png" alt="image-20200522203546622"></p>
]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统第二章</title>
    <url>/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    <content><![CDATA[<p>进程、一些算法、信号量、问题、死锁</p>
<a id="more"></a>


        <h2 id="进程的定义、组成、组织方式…">
          <a href="#进程的定义、组成、组织方式…" class="heading-link"><i class="fas fa-link"></i></a>进程的定义、组成、组织方式…</h2>
      
        <h3 id="进程的定义">
          <a href="#进程的定义" class="heading-link"><i class="fas fa-link"></i></a>进程的定义</h3>
      <p>程序：就是一个指令序列。</p>
<p>早期的计算机（只支持单道程序），CPU、I/O设备、内存都为一道程序服务。</p>
<p>内存（程序段（低地址），数据段（高地址））：程序的代码放在程序段内，程序运行过程处理的数据放在数据段内。</p>
<p>引入多道程序后：</p>
<p>为了方便操作系统管理，完成各程序并发执行，引入了进程、进程实体的概念。</p>
<p>PCB:系统为每个运行的程序配置一个数据结构，称为进程控制块（PCB），用来描述进程的各种信息（如程序代码存放位置）。操作系统通过PCB来管理进程，因此PCB中应该包含操作系统对其进行管理所需的各种信息。</p>
<ul>
<li>PCB、程序段、数据段三部分构成了进程实体（进程映像）。一般情况下，我们把进程实体就简称为进程，例如，所谓创建进程，实质上是创建进程实体中的PCB；而撤销进程，实质上是撤销进程实体中的PCB。注意：PCB是进程存在的唯一标准！</li>
</ul>
<p>从不同的角度，进程可以有不同的定义，比较传统典型的定义有：强调“动态性”</p>
<p>1、进程是程序的一次执行过程。</p>
<p>2、进程是一个程序及其数据在处理机上顺序执行时所发生的活动。</p>
<p>3、进程时具有独立功能的程序在数据集合上运动的过程，它是系统进行资源分配和调度的一个独立单位。</p>
<ul>
<li>引入进程实体的概念后，可把进程定义为：进程时进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</li>
<li>注意：严格来说，进程实体和进程并不一样，进程实体是静态的，进程则是动态的。不过，除非题目专门考察二者的区别，否则可以认为进程实体就是进程。因此我们也可以说“进程由程序段、数据段、PCB三部分组成”。</li>
</ul>

        <h3 id="进程的组成">
          <a href="#进程的组成" class="heading-link"><i class="fas fa-link"></i></a>进程的组成</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200513231930833.png" alt></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200513232239443.png" alt></p>

        <h3 id="进程的组织">
          <a href="#进程的组织" class="heading-link"><i class="fas fa-link"></i></a>进程的组织</h3>
      <p>在一个系统中，通常有数十、数百乃至数千个PCB。为了能对他们加以有效的管理，应该用适当的方式把这些PCB组织起来。</p>
<p>注：进程的组成讨论的是一个进程内部由哪些部分构成的问题，而进程的组织讨论的是多个进程之间的组织方式问题。</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200513232815464.png" alt></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200513233142008.png" alt></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200513233415673.png" alt></p>

        <h3 id="进程的特征">
          <a href="#进程的特征" class="heading-link"><i class="fas fa-link"></i></a>进程的特征</h3>
      <p>进程和程序是两个截然不同的概念，相比于程序，进程拥有以下特征:</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200513234022035.png" alt></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200513234214997.png" alt></p>

        <h2 id="进程的状态与转换">
          <a href="#进程的状态与转换" class="heading-link"><i class="fas fa-link"></i></a>进程的状态与转换</h2>
      
        <h3 id="状态">
          <a href="#状态" class="heading-link"><i class="fas fa-link"></i></a>状态</h3>
      <p>进程的三种基本状态：</p>
<ul>
<li>运行态（Running）：占有CPU，并在CPU上运行。（注意：单核处理机环境下，每一时刻最多只有一个进程处于运行态。（双核环境下可以同时有两个进程处于运行态））。</li>
<li>就绪态（Ready）：已经具备运行条件，但由于没有空闲CPU，而暂时不能运行（进程已经拥有了除处理机之外所以需要的资源，一旦获得处理机，即可立即进入运行态开始运行。即;万事具备，只欠CPU）。</li>
<li>阻塞态（Waiting/Blocked,又称：等待态）：因等待某一事件而暂时不能运行（如：等待操作系统分配打印机、等待读磁盘操作的结果。CPU是计算机中最昂贵的部件，为了提高CPU的利用率，需要先将其他进程需要的资源分配到位，才能得到CPU的服务）。</li>
</ul>
<p>另外两种状态：</p>
<ul>
<li>创建态（New，又称：新建态）：进程正在被创建，操作系统为进程分配资源、初始化PCB。</li>
<li>终止态（Terminated，又称：结束态）：进程正在从系统中撤销，操作系统会回收进程拥有的资源、撤销PCB。</li>
</ul>

        <h3 id="进程状态的转换">
          <a href="#进程状态的转换" class="heading-link"><i class="fas fa-link"></i></a>进程状态的转换</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200514224158133.png" alt></p>
<p>注意：不能由阻塞态直接转换为运行态，也不能由就绪态直接转换为阻塞态（因为进入阻塞态是进程主动请求的，必然需要进程在运行时才能发出这种请求）</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200514224913672.png" alt></p>

        <h2 id="进程控制">
          <a href="#进程控制" class="heading-link"><i class="fas fa-link"></i></a>进程控制</h2>
      
        <h3 id="基本概念">
          <a href="#基本概念" class="heading-link"><i class="fas fa-link"></i></a>基本概念</h3>
      <p>什么是进程控制？</p>
<ul>
<li>进程控制的主要功能是对系统中的所以进程实施有效的管理，它具有创建新进程、撤销已有进程、实现进程状态转换等功能。    简化理解：反正进程控制就是实现进程状态转换。</li>
</ul>
<p>如何实现进程控制？</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200514232053979.png" alt></p>
<ul>
<li>用原语实现进程控制。原语的特点是执行期间不允许中段，只能一气呵成。这种不可被中断的操作即原子操作。原语采用“关中断指令”和“开中断指令”实现</li>
</ul>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200514233035914.png" alt></p>
<p>显然，关/开中断指令的权限非常大，必然是只允许在核心态下执行的特权指令。</p>

        <h3 id="进程控制相关的原语">
          <a href="#进程控制相关的原语" class="heading-link"><i class="fas fa-link"></i></a>进程控制相关的原语</h3>
      <p>学习技巧:进程控制会导致进程状态的转换。无论哪个原语，要做的无非三类事情:</p>
<ol>
<li><p>更新PCB中 的信息(如修改进程状态标志、将运行环境保存到PCB、从PCB恢复运行环境)</p>
<ul>
<li>a.所有的进程控制原语—定都会修改进程状态标志</li>
<li>b.剥夺当前运行进程的CPU使用权必然需要保存其运行环境</li>
<li>c.某进程开始运行前必然要恢复期运行环境</li>
</ul>
</li>
<li><p>将PCB插入 合适的队列</p>
</li>
<li><p>分配/回收资源</p>
</li>
</ol>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200514234234321.png" alt="进程的创建"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200514234453912.png" alt="进程的终止"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200514234639509.png" alt="进程的阻塞和唤醒"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200514234810349.png" alt="进程的切换"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200514234846316.png" alt></p>

        <h2 id="进程通信">
          <a href="#进程通信" class="heading-link"><i class="fas fa-link"></i></a>进程通信</h2>
      
        <h3 id="什么是进程通信">
          <a href="#什么是进程通信" class="heading-link"><i class="fas fa-link"></i></a>什么是进程通信</h3>
      <p>进程通信就是指进程之间的信息交换。</p>
<p>进程是分配稀土资源的单位（包括内存地址空间），因此个金拥有的内存地址空间相互独立。</p>
<p>为了保证安全，一个进程不能直接访问另外一个进程的地址空间。但是进程之间的信息交换又是必须实现的。为了保证进程间的安全通信操纵系统提供了一些方法。</p>
<ul>
<li>进程通信：1、共享存储。2、消息传递。3、管道通信。</li>
</ul>

        <h3 id="共享存储">
          <a href="#共享存储" class="heading-link"><i class="fas fa-link"></i></a>共享存储</h3>
      <p>操作系统只负责提供共享空间和同步互斥工具（如P、V操作）。两个进程对共享空间的访问必须是互斥的（互斥访问通过操作系统提供的工具实现）。</p>
<ul>
<li>共享存储：1、基于数据结构的共享（比如共享空间里只能放一个长度是10的数组。这种存储方式速度慢、限制多。是一种低级通信方式）。2、基于存储区的共享（在内存中划出一块共享存储区、数据的形式、存放位置都由进程控制，而不是操纵系统：相比之下，这种共享方式速度更快，是一种高级通信方式）。</li>
</ul>

        <h3 id="管道通信">
          <a href="#管道通信" class="heading-link"><i class="fas fa-link"></i></a>管道通信</h3>
      <p>”管道“是指用于连接读写进程的一个共享文件，又名pipe文件。其实就是在内存中开辟一个大小固定的缓冲区。</p>
<ol>
<li><p>管道只能采用半双工通信，某一时间段内只能实现单向的传输。如果要实现双向同时通信，则需要设置两个管道。</p>
</li>
<li><p>各进程要互斥地访问管道。</p>
</li>
<li><p>数据以字符流的形式写入管道，当管道写满时，写进程的write()系统调用将被阻塞，等待读进程将数据取走。当读进程将数据全部取走后，管道变空，此时读进程的read()系统调用将被阻塞。</p>
</li>
<li><p>如果没写满，就不允许读。如果没读空，就不允许写。</p>
</li>
<li><p>数据一旦被读出，就从管道中被拋弃，这就意味着读进程最多只能有一个，否则可能会有读错数据的情况。</p>
</li>
</ol>

        <h3 id="消息传递">
          <a href="#消息传递" class="heading-link"><i class="fas fa-link"></i></a>消息传递</h3>
      <p>进程间的数据交换以格式化的消息（Message）为单位。进程通过操作系统提供的”发送消息/接受消息”连哥哥原语进行数据交换。</p>
<ul>
<li><p>Message：1、消息头（包括：发送进程ID、接受进程ID、消息类型、消息长度等格式化的信息（计算机网络中发送的”报文”其实就是一种格式化的消息））2、消息体</p>
</li>
<li><p>消息传递：1、直接通信方式（消息直接挂到接受进程的消息缓冲队列上）2、间接通信方式（消息要先发送到中间实体（信箱）中，因此也称“信箱通信方式”。Eg:计网中的电子邮件系统）</p>
</li>
</ul>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200515214300696.png" alt></p>

        <h2 id="线程概念和多线程模型">
          <a href="#线程概念和多线程模型" class="heading-link"><i class="fas fa-link"></i></a>线程概念和多线程模型</h2>
      
        <h3 id="什么是线程，为什么引入线程？">
          <a href="#什么是线程，为什么引入线程？" class="heading-link"><i class="fas fa-link"></i></a>什么是线程，为什么引入线程？</h3>
      <p>还没引入线程之前，系统中各个程序只能串行执行地执行一系列程序。为此，引入了“线程”，来增加开发度。传统的进程是程序执行流的最小单位。</p>
<p>引入线程后，线程成为了程序执行流的最小单位。是一个基本的CPU执行单元。可以把线程理解为“轻量级进程”。不仅是进程之间可以并发，进程内的各线程之间也可以并发，进程内的各线程之间也可以并发，从而进一步提高了系统的并发度，使得一个进程内也可以并发处理各种任务（如QQ视频、文字聊天、传文件）。</p>
<p>引入线程后，进程只作为除CPU之外的系统资源的分配单元（如打印机、内存地址空间等都是分配给进程的）。</p>

        <h3 id="引入线程机制后，有什么变化？">
          <a href="#引入线程机制后，有什么变化？" class="heading-link"><i class="fas fa-link"></i></a>引入线程机制后，有什么变化？</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200516170547587.png" alt></p>

        <h3 id="线程的属性">
          <a href="#线程的属性" class="heading-link"><i class="fas fa-link"></i></a>线程的属性</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200516170831037.png" alt></p>

        <h3 id="线程的实现方式">
          <a href="#线程的实现方式" class="heading-link"><i class="fas fa-link"></i></a>线程的实现方式</h3>
      
        <h4 id="用户级线程（ULT）">
          <a href="#用户级线程（ULT）" class="heading-link"><i class="fas fa-link"></i></a>用户级线程（ULT）</h4>
      <p>用户级线程由应用程序通过线程库实现。所有的线程管理工作都由应用程序负责（包括线程切换）</p>
<p>用户级线程中，线程切换可以在用户态下即可完成，无需操作系统干预。</p>
<p>在用户看来，是有多个线程。但是操作系统内核看来，并意识不到线程的存在。（用户级线程对用户不透明，对操作系统透明）</p>
<p>可以这样理解，“用户级线程”就是“从用户视角看能看到的线程”</p>

        <h4 id="内核级线程（KLT-又称为“内核支持的线程”）">
          <a href="#内核级线程（KLT-又称为“内核支持的线程”）" class="heading-link"><i class="fas fa-link"></i></a>内核级线程（KLT 又称为“内核支持的线程”）</h4>
      <p>内核级线程的管理工作由操作系统内核完成。线程调度、切换等工作都由内核负责，因此，内核级线程的切换必须在核心态下才能完成。</p>
<p>可以这样理解，“内核级线程”就是“从操作系统内核视角看能看到的线程”</p>
<p>在同时支持用户级线程个内核级线程的系统中,可采用两者组合的方式：将n个用户级线程映射到m个内核级线程上（n&gt;=m）</p>
<ul>
<li>注意：操作系统只能“看得见”内核级线程，因此只有内核级线程才是处理机分配的单位。</li>
</ul>

        <h3 id="多线程模型">
          <a href="#多线程模型" class="heading-link"><i class="fas fa-link"></i></a>多线程模型</h3>
      <p>在同时支持用户级线程个内核级线程的系统中，由几个用户级线程映射到几个内核级线程的问题引出了“多线程模型”问题。</p>
<ol>
<li><p>多对一模型：多个用户及线程映射到一个内核级线程。每个用户进程只对应一个内核级线程。</p>
<ul>
<li>优点：用户级线程的切换在用户空间即可完成，不需要切换到核心态，线程管理的系统开销小，效率高。</li>
<li>缺点：当一个用户级程序被阻塞后，整个进程都会被阻塞，并发度不高。多个线程不可在多核处理机上并发执行。</li>
</ul>
</li>
<li><p>一对一模型：一个用户级线程映射到一个内核级线程。每个用户进程有于用户级线程同数量的内核级线程。</p>
<ul>
<li>优点：当一个线程被阻塞后，别的线程还可以继续执行，并发能力强。多线程可在多核处理机上并行执行。</li>
<li>缺点：一个用户进程会占用多个内核级线程，线程切换由操作系统内核完成，需要切换到核心态，因此线程管理的成本高、开销大。</li>
</ul>
</li>
<li><p>多对多模型：n用户级线程映射到m个内核级线程（n&gt;m）。每个用户进程对应m个内核级线程。</p>
<ul>
<li>克服了多对一模型并发度不高的缺点，有克服了一对一模型中一个用户进程占用太多内核级线程，开销太大的缺点。</li>
</ul>
</li>
</ol>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200516180213168.png" alt></p>

        <h2 id="处理机调度的概念、层次">
          <a href="#处理机调度的概念、层次" class="heading-link"><i class="fas fa-link"></i></a>处理机调度的概念、层次</h2>
      
        <h3 id="调度的基本概念">
          <a href="#调度的基本概念" class="heading-link"><i class="fas fa-link"></i></a>调度的基本概念</h3>
      <p>当有一堆任务要处理，但由于资源有限，这些事情没法同时处理，这就需要某种规则来决定处理这些任务的顺序，这就是“调度”研究的问题。</p>
<p>在多道程序系统中，进程的数量往往时多余处理机的个数的，这样不可能同时并行地处理各个进程。</p>
<ul>
<li>处理机调度，就是从就绪队列中按照一定的算法选择一个进程并将处理机分配给它运行，以实现进程的并发执行。</li>
</ul>

        <h3 id="调度的三个层次——高级调度">
          <a href="#调度的三个层次——高级调度" class="heading-link"><i class="fas fa-link"></i></a>调度的三个层次——高级调度</h3>
      <p>由于内存空间有限，有时无法将用户提交的作业全部放入内存，因此就需要确定某种规则来决定将作业调入内存的顺序。</p>
<p>高级调度（作业调度）。按一定的原则从外存上处于后备队列的作业中挑选一个（或多个）作业，给他们分配内存等必要资源，并建立相应的进程（建立PCB），以使它（们）获得竞争处理机的权利。</p>
<p>高级调度是辅存(外存)与内存之间的调度。每个作业只调入一次，调出一次。作业调入时会建立相应的PCB，作业调出时才撤销PCB。高级调度主要是指调入的问题，因为只有调入的时机需要操作系统来确定，但调出的时机必然是作业运行结束才调出。</p>

        <h3 id="调度的三个层次——中级调度">
          <a href="#调度的三个层次——中级调度" class="heading-link"><i class="fas fa-link"></i></a>调度的三个层次——中级调度</h3>
      <p>引入了虚拟存储技术之后，可将暂时不能运行的进程调至外存等待。等它重新具备了运行条件且内存又稍有空闲时，再重新调入内存。这么做的目的是为了提高内存利用率和系统吞吐量。暂时调到外存等待的进程状态为挂起状态。值得注意的是，PCB并不会一起调到外存，而是会常驻内存。PCB中会记录进程数据在外存中的存放位置，进程状态等信息，操作系统通过内存中的PCB ,来保持对各个进程的监控、管理。被挂起的进程PCB会被放到的挂起队列中。</p>
<ul>
<li>中级调度(内存调度)，就是要决定将哪个处于挂起状态的进程重新调入内存。一个进程可能会被多次调出、调入内存，因此中级调度发生的频率要比高级调度更高。</li>
</ul>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200517225847859.png" alt></p>

        <h3 id="调度的三个层次——低级调度">
          <a href="#调度的三个层次——低级调度" class="heading-link"><i class="fas fa-link"></i></a>调度的三个层次——低级调度</h3>
      <p>低级调度(进程调度)，其主要任务是按照某种方法和策略从就绪队列中选取一一个进程，将处理机分配给它。</p>
<p>进程调度是操作系统中最基本的一种调度，在–般的操作系统中都必须配置进程调度。进程调度的频率很高，一般几十毫秒一次。</p>

        <h3 id="三层调度的联系、对比">
          <a href="#三层调度的联系、对比" class="heading-link"><i class="fas fa-link"></i></a>三层调度的联系、对比</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200517230221985.png" alt></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200517230306141.png" alt></p>

        <h2 id="进程调度相关知识">
          <a href="#进程调度相关知识" class="heading-link"><i class="fas fa-link"></i></a>进程调度相关知识</h2>
      
        <h3 id="时机">
          <a href="#时机" class="heading-link"><i class="fas fa-link"></i></a>时机</h3>
      <ul>
<li>进程调度（低级调度），就是按照某种算法从就绪队列中选择一个进程为其分配处理机。</li>
</ul>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200517231056332.png" alt></p>
<p>进程在操作系统内核程序临界区中不能进行调度与切换，但是在普通临界区中是可以进行调度、切换的。</p>
<p>临界资源:一个时间段内只允许–个进程使用的资源。各进程需要互斥地访问临界资源。</p>
<p>临界区:访问临界资源的那段代码。</p>
<p>内核程序临界区：一般是用来访问某种内核数据结构的，比如进程的就绪队列(由各就绪进程的PCB组成)</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200517231716813.png" alt></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200517231822643.png" alt></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200517231912708.png" alt></p>

        <h3 id="方式">
          <a href="#方式" class="heading-link"><i class="fas fa-link"></i></a>方式</h3>
      <ol>
<li><p>非剥夺调度方式：又称非抢占方式。即，只允许进程主动放弃处理机。在运行过程中即便有更紧迫的任务到达，当前进程依然会继续使用处理机，直到该进程终止或主动要求进入阻塞态。</p>
<ul>
<li>实现简单，系统开销小但是无法及时处理紧急任务，适合于早期的批处理系统</li>
</ul>
</li>
<li><p>剥夺调度方式，又称抢占方式。当一个进程正在处理机上执行时，如果有-一个更重要或更紧迫的进程需要使用处理机，则立即暂停正在执行的进程，将处理机分配给更重要紧迫的那个进程。</p>
<ul>
<li>可以优先处理更紧急的进程，也可实现让各进程按时间片轮流执行的功能(通过时钟中断)。适合于分时操作系统、实时操作系统。</li>
</ul>
</li>
</ol>

        <h3 id="进程的切换与过程">
          <a href="#进程的切换与过程" class="heading-link"><i class="fas fa-link"></i></a>进程的切换与过程</h3>
      <p>“狭义的进程调度”与“进程切换”的区别:</p>
<p>狭义的进程调度指的是从就绪队列中选中-一个要运行的进程。(这个进程可以是刚刚被暂停执行的进程，也可能是另一个进程，后- -种情况就需要进程切换)</p>
<p>进程切换是指一个进程让出处理机，由另一个进程占用处理机的过程。</p>
<p>广义的进程调度包含了选择一个进程和进程切换两个步骤。</p>
<p>进程切换的过程主要完成了:</p>
<ol>
<li><p>对原来运行进程各种数据的保存</p>
</li>
<li><p>对新的进程各种数据的恢复</p>
</li>
</ol>
<ul>
<li>(如:程序计数器、程序状态字、各种数据寄存器等处理机现场信息，这些信息一般保存在进程控制块)</li>
</ul>
<p>注意:进程切换是有代价的，因此如果过于频繁的进行进程调度、切换，必然会使整个系统的效率降低,使系统大部分时间都花在了进程切换上，而真正用于执行进程的时间减少。</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200517234510814.png" alt></p>

        <h2 id="调度算法的评价标准">
          <a href="#调度算法的评价标准" class="heading-link"><i class="fas fa-link"></i></a>调度算法的评价标准</h2>
      
        <h3 id="CPU利用率">
          <a href="#CPU利用率" class="heading-link"><i class="fas fa-link"></i></a>CPU利用率</h3>
      <p>由于早期的CPU造价极其昂贵，因此人们会希望让CPU尽可能多地工作。</p>
<p>CPU利用率:指CPU“忙碌”的时间占总时间的比例。</p>
<p>CPU利用率=忙碌的时间/总时间</p>

        <h3 id="系统吞吐量">
          <a href="#系统吞吐量" class="heading-link"><i class="fas fa-link"></i></a>系统吞吐量</h3>
      <p>对于计算机来说，希望能用尽可能少的时间处理完尽可能多的作业</p>
<p>系统吞吐量:单位时间内完成作业的数量</p>
<ul>
<li>系统吞吐量=总共完成了多少道作业/总共花了多少时间</li>
</ul>

        <h3 id="周转时间">
          <a href="#周转时间" class="heading-link"><i class="fas fa-link"></i></a>周转时间</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/8C1846EB71BA8DA9C8656AD416A2CE3F.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/46F79148A6D11CC6F68F3BE58DD0340D-1590483503713.png" alt="img"></p>

        <h3 id="等待时间">
          <a href="#等待时间" class="heading-link"><i class="fas fa-link"></i></a>等待时间</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/0B09767E71B794C4503919B015EC529F.png" alt="img"></p>

        <h3 id="响应时间">
          <a href="#响应时间" class="heading-link"><i class="fas fa-link"></i></a>响应时间</h3>
      <ul>
<li>对于计算机用户来说，会希望自己的提交的请求(比如通过键盘输入了一个调试命令)尽早地开始被系统服务、回应。</li>
<li>响应时间，指从用户提交请求到首次产生响应所用的时间。</li>
</ul>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/3615AD1E3D4DD93C533C683193133552.png" alt="img"></p>

        <h2 id="FCFS、SJF、HRRN调度算法">
          <a href="#FCFS、SJF、HRRN调度算法" class="heading-link"><i class="fas fa-link"></i></a>FCFS、SJF、HRRN调度算法</h2>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/370B2AB7FBF1B32B7580D5F963D0981A.png" alt="img"></p>

        <h3 id="先来先服务FCFS">
          <a href="#先来先服务FCFS" class="heading-link"><i class="fas fa-link"></i></a>先来先服务FCFS</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/E226208548C0413CA201614F75AC8E84.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/301F101DC70B204981CD0BAB822A3025.png" alt="img"></p>

        <h3 id="短作业优先SJF">
          <a href="#短作业优先SJF" class="heading-link"><i class="fas fa-link"></i></a>短作业优先SJF</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/3284440055E7DCA8E91D400F19E38D43.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/F650AA1DB1DA2C24184D39B4DEE792F9.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/2499B1580277DDD3CBD01021DD658794.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/D603774C9F88FEEEAE64CE5768551154.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/40179E6C3660743E1C3BA337A923FF62.png" alt="img"></p>

        <h3 id="高相应比优先">
          <a href="#高相应比优先" class="heading-link"><i class="fas fa-link"></i></a>高相应比优先</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/FBF31DF073307E4E40ED5D63585B6F58.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/6BBA45B6A44102BAAEB1D35B8418ACAC.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/B705B235FFE855D14850247F710B83BC.png" alt="img"></p>

        <h2 id="时间片轮转、优先级、多级反馈队列">
          <a href="#时间片轮转、优先级、多级反馈队列" class="heading-link"><i class="fas fa-link"></i></a>时间片轮转、优先级、多级反馈队列</h2>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/C8947EE548714835B7C835DC8A1046F9.png" alt="img"></p>

        <h3 id="时间片轮转调度算法RR">
          <a href="#时间片轮转调度算法RR" class="heading-link"><i class="fas fa-link"></i></a>时间片轮转调度算法RR</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/EFCBBDB2A01CFD0A70849476FC1FC20A.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/23E48A470DB709B8E2DD32863CFCC35A.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/24FCD420525091AF9163EE068FB9479B.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522164845801.png" alt="RR时间片轮转"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522165007615.png" alt></p>

        <h3 id="优先级调度算法">
          <a href="#优先级调度算法" class="heading-link"><i class="fas fa-link"></i></a>优先级调度算法</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522165944841.png" alt="image-20200522165944841"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522170641334.png" alt="image-20200522170641334"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522171024736.png" alt="image-20200522171024736"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522171120973.png" alt="image-20200522171120973"></p>

        <h3 id="多级反馈队列调度算法">
          <a href="#多级反馈队列调度算法" class="heading-link"><i class="fas fa-link"></i></a>多级反馈队列调度算法</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522171804658.png" alt="多级反馈队列调度算法"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522172026837.png" alt="image-20200522172026837"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522172303794.png" alt="image-20200522172303794"></p>

        <h2 id="进程同步与进程互斥">
          <a href="#进程同步与进程互斥" class="heading-link"><i class="fas fa-link"></i></a>进程同步与进程互斥</h2>
      <p>我们把一个时间段内只允许一个进程使用的资源称为临界资源。许多物理设备(比如摄像头、打印机)都属于临界资源。此外还有许多变量、数据、内存缓冲区等都属于临界资源。对临界资源的访问，必须互斥地进行。互斥，亦称间接制约关系。进程互斥指当一个进程访问某临界资源时，另一个想要访问该临界资源的进程必须等待。当前访问临界资源的进程访问结束，释放该资源之后，另一个进程才能去访问临界资源。</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522173038616.png" alt="image-20200522173038616"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522173216436.png" alt="image-20200522173216436"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522173230260.png" alt="image-20200522173230260"></p>

        <h2 id="进程互斥的软件实现方法">
          <a href="#进程互斥的软件实现方法" class="heading-link"><i class="fas fa-link"></i></a>进程互斥的软件实现方法</h2>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522173425200.png" alt="image-20200522173425200"></p>

        <h3 id="单标志法">
          <a href="#单标志法" class="heading-link"><i class="fas fa-link"></i></a>单标志法</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522173744354.png" alt="单标志法"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522173914634.png" alt="局限性"></p>

        <h3 id="双标志先检查法">
          <a href="#双标志先检查法" class="heading-link"><i class="fas fa-link"></i></a>双标志先检查法</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522174701927.png" alt="双标志先检查法"></p>

        <h3 id="双标志后检查法">
          <a href="#双标志后检查法" class="heading-link"><i class="fas fa-link"></i></a>双标志后检查法</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522174915734.png" alt="双标志后检查法"></p>

        <h3 id="Peterson算法">
          <a href="#Peterson算法" class="heading-link"><i class="fas fa-link"></i></a>Peterson算法</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522202550329.png" alt="image-20200522202550329"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522203438406.png" alt="image-20200522203438406"></p>

        <h2 id="进程互斥的硬件实现方法">
          <a href="#进程互斥的硬件实现方法" class="heading-link"><i class="fas fa-link"></i></a>进程互斥的硬件实现方法</h2>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200526223048805.png" alt="image-20200526223048805"></p>

        <h3 id="中断屏蔽方法">
          <a href="#中断屏蔽方法" class="heading-link"><i class="fas fa-link"></i></a>中断屏蔽方法</h3>
      <p>利用“开/关中断指令”实现(与原语的实现思想相同，即在某进程开始访问临界区到结束访问为止都不允许被中断，也就不能发生进程切换，因此也不可能发生两个同时访问临界区的情况)</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200526223439051.png" alt="image-20200526223439051"></p>
<p>优点:简单、高效<br>缺点:不适用于多处理机;只适用于操作系统内核进程，不适用于用户进程(因为开/关中断指令<br>只能运行在内核态，这组指令如果能让用户随意使用会很危险)只能运行在内核态，这组指令如果能让用户随意使用会很危险)</p>

        <h3 id="TestAndSet指令">
          <a href="#TestAndSet指令" class="heading-link"><i class="fas fa-link"></i></a>TestAndSet指令</h3>
      <p>简称TS指令，也有地方称为TestAndSetLock指令，或TSL指令</p>
<p>TSL指令是用硬件实现的，执行的过程不允许被中断，只能一 -气呵成。以下是用C语言描述的逻辑</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200526224047650.png" alt="image-20200526224047650"></p>
<p>若刚开始lock是false, 则TSL返回的old值为false, while 循环条件不满足，直接跳过循环，进入临界区。若刚开始lock是true，则执行TLS后old返回的值为true，while 循环条件满足，会一直循环，直到当前访问临界区的进程在退出区进行“解锁”。相比软件实现方法，TSL 指令把“上锁”和“检查”操作用硬件的方式变成了一气呵成的原子操作。</p>
<ul>
<li><p>优点:实现简单，无需像软件实现方法那样严格检查是否会有逻辑漏洞;适用于多处理机环境。</p>
</li>
<li><p>缺点:不满足“让权等待”原则，暂时无法进入临界区的进程会占用CPU并循环执行TSL指令，从而导致“忙等”。</p>
</li>
</ul>

        <h3 id="Swap指令">
          <a href="#Swap指令" class="heading-link"><i class="fas fa-link"></i></a>Swap指令</h3>
      <p>有的地方也叫Exchange指令，或简称XCHG指令。</p>
<p>Swap指令是用硬件实现的，执行的过程不允许被中断，只能–气呵成。以下是用C语言描述的逻辑</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200526224818667.png" alt="image-20200526224818667"></p>
<p>逻辑.上来看Swap和TSL并无太大区别，都是先记录下此时临界区是否已经被上锁(记录在old变量上)，再将上锁标记lock设置为true，最后检查old，如果old为false则说明之前没有别的进程对临界区_上锁，则可跳出循环，进入临界区。</p>
<ul>
<li><p>优点:实现简单，无需像软件实现方法那样严格检查是否会有逻辑漏洞;适用于多处理机环境。</p>
</li>
<li><p>缺点:不满足“让权等待”原则，暂时无法进入临界区的进程会占用CPU并循环执行TSL指令，从而导致“忙等”。</p>
</li>
</ul>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200526224926111.png" alt="image-20200526224926111"></p>

        <h3 id="信号量机制">
          <a href="#信号量机制" class="heading-link"><i class="fas fa-link"></i></a>信号量机制</h3>
      <p>用户进程可以通过使用操作系统提供的一对原语来对信号量进行操作，从而很方便的实现了进程互斥、进程同步。</p>
<p>信号量其实就是一个变量(可以是- 一个整数，也可以是更复杂的记录型变量)，可以用一个信号量来表示系统中某种资源的数量，比如:系统中只有一台打印机，就可以设置一个初值为1的信号量。</p>
<p>原语是一种特殊的程序段，其执行只能一气呵成，不可被中断。原语是由关中断/开中断指令实现的。软件解决方案的主要问题是由“进入区的各种操作无法一气呵成”，因此如果能把进入区、退出区的操作都用“原语”实现，使这些操作能“一气呵成”就能避免问题。</p>
<p>一对原语:wait(S)原语和signal(S)原语，可以把原语理解为我们自己写的函数，函数名分别为wait和signal,括号里的信号量S其实就是函数调用时传入的-一个参数。</p>
<p>wait、signal 原语常简称为P、V操作(来自荷兰语proberen和verhogen)。因此，做题的时候常把wait(S)、signal(S) 两个操作分别写为P(S)、V(S)</p>

        <h3 id="信号量机制——整型信号量">
          <a href="#信号量机制——整型信号量" class="heading-link"><i class="fas fa-link"></i></a>信号量机制——整型信号量</h3>
      <p>用一个整数型的变量作为信号量，用来表示系统中某种资源的数量。（与普通整数变量的区别:对信号量的操作只有三种，即初始化、P操作、V操作）</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200526230900174.png" alt="image-20200526230900174"></p>

        <h3 id="信号量机制——记录型信号量">
          <a href="#信号量机制——记录型信号量" class="heading-link"><i class="fas fa-link"></i></a>信号量机制——记录型信号量</h3>
      <p>整型信号量的缺陷是存在“忙等”问题，因此人们又提出了“记录型信号量”，即用记录型数据结构表示的信号量。</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200526231540345.png" alt="image-20200526231540345"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200526232229726.png" alt="image-20200526232229726"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200526232341071.png" alt="image-20200526232341071"></p>

        <h2 id="用信号量机制实现进程互斥、同步、前驱关系">
          <a href="#用信号量机制实现进程互斥、同步、前驱关系" class="heading-link"><i class="fas fa-link"></i></a>用信号量机制实现进程互斥、同步、前驱关系</h2>
      
        <h3 id="信号量机制实现进程互斥">
          <a href="#信号量机制实现进程互斥" class="heading-link"><i class="fas fa-link"></i></a>信号量机制实现进程互斥</h3>
      <p>1.分析并发进程的关键活动，划定临界区(如:对临界资源打印机的访问就应放在临界区)</p>
<p>2.设置互斥信号量mutex,初值为1.</p>
<p>3.在临界区之前执行P(mutex)</p>
<p>4.在临界区之后执行V(mutex)</p>
<img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200526233715780.png" alt="image-20200526233715780" style="zoom:80%;">

<ul>
<li>注意:对不同的临界资源需要设置不同的互斥信号量。P、V操作必须成对出现。缺少P(mutex)就不能保证临界资源斥访问。缺少V(mutex)会导致资源的互永不被释放，等待进程永不被唤醒。</li>
</ul>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200526233738437.png" alt="image-20200526233738437"></p>

        <h3 id="信号量机制实现进程同步">
          <a href="#信号量机制实现进程同步" class="heading-link"><i class="fas fa-link"></i></a>信号量机制实现进程同步</h3>
      <p>用信号量实现进程同步:</p>
<p>1.分析什么地方需要实现“同步关系”，即必须保证“一前一后”执行的两个操作( 或两句代码)</p>
<p>2.设置同步信号量S, 初始为0</p>
<p>3.在“前操作”之后执行V(S)</p>
<p>4.在“后操作”之前执行P(S)</p>
<img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200526235448938.png" alt="image-20200526235448938" style="zoom:80%;">

<p>若先执行到V(S)操作，则S++ 后S=1。之后当执行到P(S)操作时，由于S=1，表示有可用资源，会执行S–，S的值变回0,P2进程不会执行block原语，而是继续往下执行代码4。</p>
<p>若先执行到P(S)操作，由于S=0，S– 后S=-1，表示此时没有可用资源，因此P操作中会执行block原语，主动请求阻塞。之后当执行完代码2，继而执行V(S)操作，S++， 使S变回0,由于此时有进程在该信号量对应的阻塞队列中，因此会在V操作中执行wakeup原语，唤醒P2进程。这样P2就可以继续执行代码4了。</p>

        <h3 id="信号量机制实现前驱关系">
          <a href="#信号量机制实现前驱关系" class="heading-link"><i class="fas fa-link"></i></a>信号量机制实现前驱关系</h3>
      <p>进程P1中有句代码S1，P2中有句代码S2….P6中有句代码S6。这些代码要求按如下前驱图所示的顺序来执行:</p>
<p>其实每一对前驱关系都是一个进程同步问题(需要保证一前一后的操作)，因从：</p>
<p>1.要为每一对前驱关系各设置-一个同步变量</p>
<p>2.在“前操作”之后对相应的同步变量执行V操作</p>
<ol start="3">
<li>在“后操作”之前对相应的同步变量执行P操作</li>
</ol>
<img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527002207642.png" alt="image-20200527002207642" style="zoom:80%;">

<img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527002240336.png" alt="image-20200527002240336" style="zoom:80%;">

<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527002428950.png" alt="image-20200527002428950"></p>

        <h2 id="生产者消费者问题">
          <a href="#生产者消费者问题" class="heading-link"><i class="fas fa-link"></i></a>生产者消费者问题</h2>
      
        <h3 id="问题描述">
          <a href="#问题描述" class="heading-link"><i class="fas fa-link"></i></a>问题描述</h3>
      <p>系统中有一组生产者进程和一-组消费者进程，生产者进程每次生产-一个产品放入缓冲区，消费者进程每次从缓冲区中取出一一个产品并使用。(注: 这里的“产品”理解为某种数据)生产者、消费者共享-一个初始为空、大小为n的缓冲区。</p>
<p>只有缓冲区没满时，生产者才能把产品放入缓冲区，否则必须等待。</p>
<p>只有缓冲区不空时，消费者才能从中取出产品，否则必须等待。</p>
<p>缓冲区是临界资源，各进程必须互斥地访问。</p>
<p>PV操作题目分析步骤:</p>
<p>1.关系分析。找出题目中描述的各个进程，分析它们之间的同步、互斥关系。</p>
<p>2.整理思路。根据各进程的操作流程确定P、V操作的大致顺序。</p>
<p>3.设置信号量。设置需要的信号量，并根据题目条件确定信号量初值。 (互斥信号量初值一般为1，同步信号里的初如值要看对应资源的初如值足多少)</p>
<img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527171531436.png" alt="image-20200527171531436" style="zoom:80%;">

<img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527172116082.png" alt="image-20200527172116082" style="zoom:80%;">


        <h3 id="P、V操作是否可以交换问题">
          <a href="#P、V操作是否可以交换问题" class="heading-link"><i class="fas fa-link"></i></a>P、V操作是否可以交换问题</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527174145490.png" alt="image-20200527174145490"></p>
<p>生产者消费者问题是一个互斥、同步的综合问题。对于初学者来说最难的是发现题目中隐含的两对同步关系。有时候是消费者需要等待生产者生产，有时候是生产者要等待消费者消费，这是两个不同的“一前一后问题”，因此也需要设置两个同步信号量。</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527174433077.png" alt="image-20200527174433077"></p>

        <h2 id="多生产者多消费者问题">
          <a href="#多生产者多消费者问题" class="heading-link"><i class="fas fa-link"></i></a>多生产者多消费者问题</h2>
      
        <h3 id="问题分析">
          <a href="#问题分析" class="heading-link"><i class="fas fa-link"></i></a>问题分析</h3>
      <p>桌子上有一只盘子，每次只能向其中放入一个水果。爸爸专向盘子中放苹果，妈妈专向盘子中放橘子，儿子专等着吃盘子中的橘子，女儿专等着吃盘子中的苹果。只有盘子空时，爸爸或妈妈才可向盘子中放一一个水果。仅当盘子中有自己需要的水果时，儿子或女儿可以从盘子中取出水果。</p>
<ol>
<li><p>关系分析。找出题目中描述的各个进程，分析它们之间的同步、互斥关系。</p>
<ul>
<li><p>互斥关系:</p>
<ul>
<li>对缓冲区(盘子)的访问要互斥地进行</li>
</ul>
</li>
<li><p>同步关系(一前一后) :</p>
<ol>
<li>父亲将苹果放入盘子后，女儿才能取苹果</li>
<li>母亲将橘子放入盘子后，儿子才能取橘子</li>
<li>只有盘子为空时，父亲或母亲才能放入水果（“盘子为空”这个事件可以由儿子或女儿触发，事件发生后才允许父亲或母亲放水果）</li>
</ol>
</li>
</ul>
</li>
</ol>
<p>2.整理思路。根据各进程的操作流程确定P、V操作的大致顺序。</p>
<p>3.设置信号量。设置需要的信号量，并根据题目条件确定信号量初值。( 互斥信号量初值一般为1，同步信号量的初始值要看对应资源的初始值是多少)</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527184130006.png" alt="image-20200527184130006"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527184648273.png" alt="image-20200527184648273"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527184736689.png" alt="image-20200527184736689"></p>
<ul>
<li>原因在于:本题中的缓冲区大小为1，在任何时刻，apple、 orange、 plate 三个同步信号量中最多只有一个是1。最多只有一个进程的P操作不会被阻塞，并因此在任何时刻，顺利地进入临界区…</li>
</ul>
<p>如果盘子（缓冲区）容量为2：</p>
<p>父亲P(plate)，可以访问盘子→母亲P(plate)，可以访问盘子&gt;父亲在往盘子里放苹果，同时母亲也可以往盘子里放橘子。于是就出现了两个进程同时访问缓冲区的情况，有可能导致两个进程写入缓冲区的数据相互覆盖的情况。因此，如果缓冲区大小大于1，就必须专门设置一个互斥信号量mutex来保证互斥访问缓冲区。</p>

        <h2 id="吸烟者问题">
          <a href="#吸烟者问题" class="heading-link"><i class="fas fa-link"></i></a>吸烟者问题</h2>
      
        <h3 id="问题描述-1">
          <a href="#问题描述-1" class="heading-link"><i class="fas fa-link"></i></a>问题描述</h3>
      <p>假设一个系统有三个抽烟者进程和一-个供应者进程。每个抽烟者不停地卷烟并抽掉它，但是要卷起并抽掉一支烟， 抽烟者需要有三种材料:烟草、纸和胶水。三个抽烟者中，第一个拥有烟草、第二个拥有纸、第三个拥有胶水。供应者进程无限地提供三种材料，供应者每次将两种材料放桌子上，拥有剩下那种材料的抽烟者卷一根烟并抽掉它， 并给供应者进程-一个信号告诉完成了，供应者就会放另外两种材料再桌上，这个过程一直重复(让三个抽烟者轮流地抽烟)本质上这题也属于“生产者-消费者”问题，更详细的说应该是“可生产多种产品的单生产者—多消费者”。</p>
<ol>
<li><p>关系分析。找出题目中描述的各个进程，分析它们之间的同步、互斥关系。</p>
</li>
<li><p>整理思路。根据各进程的操作流程确定P、V操作的大致顺序</p>
</li>
<li><p>设置信号量。设置需要的信号量，并根据题目条件确定信号量初值。( 互斥信号量初值一般为1，同步信号量的初始值要看对应资源的初始值是多少)</p>
</li>
</ol>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527222804362.png" alt="image-20200527222804362"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527223310583.png" alt="image-20200527223310583"></p>

        <h3 id="如何实现">
          <a href="#如何实现" class="heading-link"><i class="fas fa-link"></i></a>如何实现</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527223704077.png" alt="image-20200527223704077"></p>

        <h2 id="读者—写者问题">
          <a href="#读者—写者问题" class="heading-link"><i class="fas fa-link"></i></a>读者—写者问题</h2>
      <p> 有读者和写者两组并发进程，共享-一个文件，当两个或两个以上的读进程同时访问共享数据时不会产生副作用，但若某个写进程和其他进程(读进程或写进程)同时访问共享数据时则可能导致数据不一致的错误。因此要求:①允许多个读者可以同时对文件执行读操作;②只允许一个写者往文件中写信息;③任一写者在完成写操作之前不允许其他读者或写者工作;④写者执行写操作前，应让已有的读者和写者全部退出。</p>
<img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527225721460.png" alt="image-20200527225721460" style="zoom:80%;">

<ol>
<li><p>关系分析。找出题目中描述的各个进程，分析它们之间的同步、互斥关系</p>
</li>
<li><p>整理思路。根据各进程的操作流程确定P、V操作的大致顺序</p>
</li>
<li><p>设置信号量。设置需要的信号量，并根据题目条件确定信号量初值。( 互斥信号量初值一般为1,同步信号量的初始值要看对应资源的初始值是多少)</p>
</li>
</ol>
<p>两类进程:写进程、读进程</p>
<p>互斥关系:写进程-写进程、写进程一读进程。读进程与读进程不存在互斥问题。</p>
<p>写者进程和任何进程都互斥，设置一个互斥信号量rw,在写者访问共享文件前后分别执行P、V操作。读者进程和写者进程也要互斥，因此读者访问共享文件前后也要对rw执行P、V操作。</p>
<p>如果所有读者进程在访问共享文件之前都执行P(rw)操作，那么会导致各个读进程之间也无法同时访问文件。Key:读者写者问题的核心思想一-怎么处理该问题呢?</p>
<p>P(rw)和V(rw)其实就是对共享文件的“加锁”和“解锁”。既然各个读进程需要同时访问，而读进程与写进程又必须互斥访问，那么我们可以让第一个访问文件的读进程“ 加锁”，让最后一个访问完文件的读进程“解锁”。可以设置一个整数变量count来记录当前有几个读进程在访问文件。</p>

        <h3 id="如何实现-1">
          <a href="#如何实现-1" class="heading-link"><i class="fas fa-link"></i></a>如何实现</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527230838200.png" alt="image-20200527230838200"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527231341203.png" alt="image-20200527231341203"></p>

        <h2 id="哲学家进餐问题">
          <a href="#哲学家进餐问题" class="heading-link"><i class="fas fa-link"></i></a>哲学家进餐问题</h2>
      <p>一张圆桌上坐着5名哲学家，每两个哲学家之间的桌上摆-根筷子，桌子的中间是一碗米饭。哲学家们倾注毕生的精力用于思考和进餐，哲学家在思考时，并不影响他人。只有当哲学家饥饿时,才试图拿起左、右两根筷子(- -根一根地拿起)。如果筷子已在他人手上，则需等待。饥饿的哲学家只有同时拿起两根筷子才可以开始进餐，当进餐完毕后，放下筷子继续思考。</p>
<img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527231922367.png" alt="image-20200527231922367" style="zoom:67%;">

<p>1.关系分析。系统中有5个哲学家进程，5位哲学家与左右邻居对其中间筷子的访问是互斥关系。</p>
<p>2.整理思路。这个问题中只有互斥关系，但与之前遇到的问题不同的事，每个哲学家进程需要同时持有两个临界资源才能开始吃饭。如何避免临界资源分配不当造成的死锁现象，是哲学家问题的精髓。</p>
<p>3.信号量设置。定义互斥信号量数组chopstick[5]={1,1,1,1,1}用于实现对5个筷子的互斥访问。并对哲学家按0~4编号，哲学家i左边的筷子编号为i，右边的筷子编号为(i+1)%5。</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527232333785.png" alt="image-20200527232333785"></p>
<ul>
<li>如果五个哲学家并发地拿起了自己左手边的筷子，每位哲学家循环等待右边的人放下筷子（阻塞）。发生“死锁”。这种解决方案不合理。×</li>
</ul>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527232709330.png" alt="image-20200527232709330"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527232902726.png" alt="image-20200527232902726"></p>
<ul>
<li>第三种解决方法</li>
</ul>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200527233342980.png" alt="image-20200527233342980"></p>
<ul>
<li>更准确的说法应该是:各哲学家拿筷子这件事必须互斥的执行。这就保证了即使一个哲学家在拿筷子拿到一半时被阻塞，也不会有别的哲学家会继续尝试拿筷子。这样的话，当前正在吃饭的哲学家放下筷子后，被阻塞的哲学家就可以获得等待的筷子了。</li>
</ul>

        <h2 id="管程">
          <a href="#管程" class="heading-link"><i class="fas fa-link"></i></a>管程</h2>
      <ul>
<li>管程是一种特殊的软件模块，有这些部分组成: <ol>
<li>局部于管程的共享数据结构说明;</li>
<li>对该数据结构进行操作的一-组过程;</li>
<li>对局部于管程的共享数据设置初始值的语句;</li>
</ol>
</li>
</ul>
<p>4.管程有一个名字。</p>
<ul>
<li>管程的基本特征:<ol>
<li>管程的基本特征:</li>
<li>一个进程只有通过调用管程内的过程才能进入管程访问共享数据;</li>
<li>每次仅允许一个进程在管程内执行某个内部过程。</li>
</ol>
</li>
</ul>

        <h2 id="死锁">
          <a href="#死锁" class="heading-link"><i class="fas fa-link"></i></a>死锁</h2>
      
        <h3 id="死锁的概念">
          <a href="#死锁的概念" class="heading-link"><i class="fas fa-link"></i></a>死锁的概念</h3>
      <ul>
<li>在并发环境下各进程因竞争资源而造成的一种互相等待对方手里的资源，导致各进程都阻塞，都无法向前推进的现象，就是“死锁”。发生死锁后若无外力干涉，这些进程都将无法向前推进。</li>
</ul>

        <h4 id="死锁、饥饿、死循环的区别">
          <a href="#死锁、饥饿、死循环的区别" class="heading-link"><i class="fas fa-link"></i></a>死锁、饥饿、死循环的区别</h4>
      <ul>
<li><p>死锁:各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象。</p>
</li>
<li><p>饥饿:由于长期得不到想要的资源，某进程无法向前推进的现象。比如:在短进程优先(SPF) 算法中，若有源源不断的短进程到来，则长进程将一直得不到处理机， 从而发生长进程“饥饿”,</p>
</li>
<li><p>死循环:某进程执行过程中一直跳不出某个循环的现象。有时是因为程序逻辑bug导致的，有时是程序员故意设计的。</p>
</li>
</ul>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200529234042273.png" alt="image-20200529234042273"></p>

        <h4 id="死锁产生的必要条件">
          <a href="#死锁产生的必要条件" class="heading-link"><i class="fas fa-link"></i></a>死锁产生的必要条件</h4>
      <p>产生死锁必须同时满足一下四个条件，只 要其中任一条件不成立，死锁就不会发生。</p>
<ol>
<li><p>互斥条件:只有对必须互斥使用的资源的争抢才会导致死锁( 如哲学家的筷子、打印机设备)。像内存、扬声器这样可以同时让多个进程使用的资源是不会导致死锁的(因为进程不用阻塞等待这种资源)。</p>
</li>
<li><p>不剥夺条件:进程所获得的资源在未使用完之前，不能由其他进程强行夺走，只能主动释放。</p>
</li>
<li><p>请求和保持条件:进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源又被其他进程占有，此时请求进程被阻塞，但又对自己已有的资源保持不放。</p>
</li>
<li><p>循环等待条件:存在一种进程资源的循环等待链，链中的每一个进程已获得的资源同时被下一个进程所请求。</p>
</li>
</ol>
<p>注意!发生死锁时一定有循环等待，但是发生循环等待时未必死锁( 循环等待是死锁的必要不充分条件)</p>
<p>如果同类资源数大于1，则即使有循环等待，也未必发生死锁。但如果系统中每类资源都只有一个，那循环等待就是死锁的充分必要条件了。</p>

        <h4 id="什么时候会发生死锁">
          <a href="#什么时候会发生死锁" class="heading-link"><i class="fas fa-link"></i></a>什么时候会发生死锁</h4>
      <ol>
<li><p>对系统资源的竞争。各进程对不可剥夺的资源(如打印机)的竞争可能引起死锁，对可剥夺的资源(CPU)的竞争是不会引起死锁的。</p>
</li>
<li><p>进程推进顺序非法。请求和释放资源的顺序不当，也同样会导致死锁。例如，并发执行的进程P1、P2分别申请并占有了资源R1、R2，之后进程P1又紧接着申请资源R2，而进程P2又申请资源R1,两者会因为申请的资源被对方占有而阻塞，从而发生死锁。</p>
</li>
<li><p>信号量的使用不当也会造成死锁。如生产者~消费者问题中，如果实现互斥的P操作在实现同步的P操作之前，就有可能导致死锁。( 可以把互斥信号量、同步信号量也看做是一-种抽象的系统资源)</p>
</li>
</ol>
<p>总之，对不可剥夺资源的不合理分配，可能导致死锁。</p>

        <h4 id="死锁的处理策略">
          <a href="#死锁的处理策略" class="heading-link"><i class="fas fa-link"></i></a>死锁的处理策略</h4>
      <ol>
<li><p>预防死锁。破坏死锁产生的四个必要条件中的一一个或几个。</p>
</li>
<li><p>避免死锁。用某种方法防止系统进入不安全状态，从而避免死锁( 银行家算法)</p>
</li>
<li><p>死锁的检测和解除。允许死锁的发生，不过操作系统会负责检测出死锁的发生，然后采取某种措施解除死锁。</p>
</li>
</ol>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200529235250341.png" alt="image-20200529235250341"></p>

        <h3 id="死锁的处理策略——预防死锁">
          <a href="#死锁的处理策略——预防死锁" class="heading-link"><i class="fas fa-link"></i></a>死锁的处理策略——预防死锁</h3>
      
        <h4 id="破坏互斥条件">
          <a href="#破坏互斥条件" class="heading-link"><i class="fas fa-link"></i></a>破坏互斥条件</h4>
      <p>互斥条件:只有对必须互斥使用的资源的争抢才会导致死锁。</p>
<p>如果把只能互斥使用的资源改造为允许共享使用，则系统不会进入死锁状态。比如: SPOOLing技术。操作系统可以采用SPOOLing技术把独占设备在逻辑.上改造成共享设备。比如，用SPOOLing技 术将打印机改造为共享设备….</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200529235937000.png" alt="image-20200529235937000"></p>
<p>该策略的缺点:并不是所有的资源都可以改造成可共享使用的资源。并且为了系统安全，很多地方还必须保护这种互斥性。因此，很多时候都无法破坏互斥条件。</p>

        <h4 id="破坏不剥夺条件">
          <a href="#破坏不剥夺条件" class="heading-link"><i class="fas fa-link"></i></a>破坏不剥夺条件</h4>
      <p>不剥夺条件:进程所获得的资源在未使用完之前，不能由其他进程强行夺走，只能主动释放。</p>
<p>破坏不剥夺条件:</p>
<p>方案一:当某个进程请求新的资源得不到满足时，它必须立即释放保持的所有资源，待以后需要时再重新申请。也就是说，即使某些资源尚未使用完，也需要主动释放，从而破坏了不可剥夺条件。</p>
<p>方案二:当某个进程需要的资源被其他进程所占有的时候，可以由操作系统协助，将想要的资源强行剥夺。这种方式一-般需要考虑各进程的优先级(比如:剥夺调度方式，就是将处理机资源强行剥夺给优先级更高的进程使用)</p>
<p>该策略的缺点:</p>
<p>1.实现起来比较复杂。</p>
<p>2.释放已获得的资源可能造成前一阶段工作的失效。因此这种方法一般只适用于易保存和恢复状态的资源，如CPU。</p>
<p>3.反复地申请和释放资源会增加系统开销，降低系统吞吐量。</p>
<p>4.若采用方案一，意味着只要暂时得不到某个资源，之前获得的那些资源就都需要放弃，以后再重新申请。如果一直发生这样的情况，就会导致进程饥饿。</p>

        <h4 id="破坏请求和保持条件">
          <a href="#破坏请求和保持条件" class="heading-link"><i class="fas fa-link"></i></a>破坏请求和保持条件</h4>
      <p>请求和保持条件:进程已经保持了至少-一个资源，但又提出了新的资源请求，而该资源又被其他进程占有，此时请求进程被阻塞，但又对自己已有的资源保持不放。</p>
<p>可以采用静态分配方法，即进程在运行前- - 次申请完它所需要的全部资源，在它的资源未满足前,不让它投入运行。一旦投入运行后，这些资源就- -直归它所有，该进程就不会再请求别的任何资源了。</p>
<p>该策略实现起来简单，但也有明显的缺点:</p>
<p>有些资源可能只需要用很短的时间，因此如果进程的整个运行期间都一直保持着所有资源，就会造成严重的资源浪费，资源利用率极低。另外，该策略也有可能导致某些进程饥饿。</p>

        <h4 id="破坏循坏等待条件">
          <a href="#破坏循坏等待条件" class="heading-link"><i class="fas fa-link"></i></a>破坏循坏等待条件</h4>
      <p>循环等待条件:存在一种进程资源的循环等待链，链中的每一个进程己获得的资源同时被下一个进程所请求。</p>
<p>可采用顺序资源分配法。首先给系统中的资源编号，规定每个进程必须按编号递增的顺序请求资源，同类资源(即编号相同的资源)一次申请完。</p>
<p>原理分析:一个进程只有已占有小编号的资源时，才有资格申请更大编号的资源。按此规则，已持有大编号资源的进程不可能逆向地回来申请小编号的资源，从而就不会产生循环等待的现象。</p>
<img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200530001252964.png" alt="image-20200530001252964" style="zoom:80%;">

<p>该策略的缺点:</p>
<p>1.不方便增加新的设备，因为可能需要重新分配所有的编号;</p>
<p>2.进程实际使用资源的顺序可能和编号递增顺序不一致，会导致资源浪费;</p>
<p>3.必须按规定次序申请资源，用户编程麻烦。</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200530001556870.png" alt="image-20200530001556870"></p>

        <h3 id="死锁的处理策略——避免死锁（银行家算法）">
          <a href="#死锁的处理策略——避免死锁（银行家算法）" class="heading-link"><i class="fas fa-link"></i></a>死锁的处理策略——避免死锁（银行家算法）</h3>
      <p>所谓安全序列，就是指如果系统按照这种序列分配资源，则每个进程都能顺利完成。只要能找出一个安全序列，系统就是安全状态。当然，安全序列可能有多个。</p>
<p>如果分配了资源之后，系统中找不出任何一个安全序列，系统就进入了不安全状态。这就意味着之后可能所有进程都无法顺利的执行下去。当然，如果有进程提前归还了一些资源，那系统也有可能重新回到安全状态，不过我们在分配资源之前总是要考虑到最坏的情况。</p>
<p>如果系统处于安全状态，就一定不会发生死锁。如果系统进入不安全状态，就可能发生死锁(处于不安全状态未必就是发生了死锁，但发生死锁时–定是在不安全状态)因此可以在资源分配之前预先判断这次分配是否会导致系统进入不安全状态，以此决定是否答应资源分配请求。这也是“银行家算法”的核心思想。</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200530133810329.png" alt="image-20200530133810329"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200530133730888.png" alt="image-20200530133730888"></p>

        <h4 id="银行家算法">
          <a href="#银行家算法" class="heading-link"><i class="fas fa-link"></i></a>银行家算法</h4>
      <p>假设系统中有n个进程，m种资源</p>
<p>每个进程在运行前先声明对各种资源的最大需求数，则可用一个n* m的矩阵(可用二维数组实现)表示所有进程对各种资源的最大需求数。不妨称为最大需求矩阵Max，Max[i, j]=K表示进程Pi最多需要K个资源Rj。同理，系统可以用一个n*m的分配矩阵Allocation表示对所有进程的资源分配情况。Max - Allocation =Need矩阵，表示各进程最多还需要多少各类资源。另外，还要用一个长度为m的一维数组Available表示当前系统中还有多少可用资源。</p>
<p>某进程Pi向系统申请资源，可用一个长度为m的一维数组Request,表示本次申请的各种资源量。</p>
<p>可用银行家算法预判本次分配是否会导致系统进入不安全状态:</p>
<p>①如果RequestijsNeed[i, jl (0sjsm)便转向②;否则认为出错。（因为它所需要的资源数已超过它所宣布的最大值。）</p>
<p>②如果Request[i]sAvailable[j] (0sjsm),便转向③;否则表示尚无足够资源，Pi必须等待。</p>
<p>③系统试探着把资源分配给进程Pi，并修改相应的数据(并非真的分配，修改数值只是为了做预判) :</p>
<p>Available = Available - Request;</p>
<p>Allocation[i, j] = Allocation[i, j] + Request[i];</p>
<p>Need[i, j] = Need[i, j] - Request,[j]</p>
<p>④操作系统执行安全性算法，检查此次资源分配后，系统是否处于安全状态。若安全，才正式分配;否则，恢复相应数据，让进程阻塞等待。</p>
<ul>
<li><p>数据结构:</p>
<p>长度为m的一-维数组Available表示还有多少可用资源</p>
<p>n*m矩阵Max表示各进程对资源的最大需求数</p>
<p>n*m矩阵Allocation表示已经给各进程分配了多少资源</p>
<p>Max - Allocation = Need矩阵表示各进程最多还需要多少资源用长度为m的一-位数组Request表示进程此次申请的各种资源数</p>
</li>
<li><p>银行家算法步骤：</p>
<p>①检查此次申请是否超过了之前声明的最大需求数</p>
<p>②检查此时系统剩余的可用资源是否还能满足这次请求</p>
<p>③试探着分配，更改各数据结构</p>
<p>④用安全性算法检查此次分配是否会导致系统进入不安全状态</p>
</li>
<li><p>安全性算法步骤:</p>
<p>检查当前的剩余可用资源是否能满足某个进程的最大需求，如果可以，就把该进程加入安全序列，并把该进程持有的资源全部回收。</p>
<p>不断重复上述过程，看最终是否能让所有进程都加入安全序列。</p>
</li>
</ul>
<p>系统处于不安全状态未必死锁，但死锁时一定处于不安全状态。 系统处于安全状态一定不 会死锁。</p>

        <h3 id="死锁的处理策略——检测和解除">
          <a href="#死锁的处理策略——检测和解除" class="heading-link"><i class="fas fa-link"></i></a>死锁的处理策略——检测和解除</h3>
      
        <h4 id="死锁的检测">
          <a href="#死锁的检测" class="heading-link"><i class="fas fa-link"></i></a>死锁的检测</h4>
      <p>为了能对系统是否已发生了死锁进行检测，必须:</p>
<ol>
<li><p>用某种数据结构来保存资源的请求和分配信息:</p>
</li>
<li><p>提供一种算法， 利用上述信息来检测系统是否已进入死锁状态。</p>
</li>
</ol>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200530140735546.png" alt="image-20200530140735546"></p>
<p>如果系统中剩余的可用资源数足够满足进程的需求，那么这个进程暂时是不会阻塞的，可以顺利地执行下去。如果这个进程执行结束了把资源归还系统，就可能使某些正在等待资源的进程被激活，并顺利地执行下去。相应的，这些被激活的进程执行完了之后又会归还一些资源，这样可能又会激活另外-些阻塞的进程…</p>
<p>如果按上述过程分析，最终能消除所有边，就称这个图是可完全简化的。此时- -定没有发生死锁(相当于能找到一个安全序列)</p>
<p>如果最终不能消除所有边，那么此时就是发生了死锁。</p>
<p>最终还连着边的那些进程就是处于死锁状态的进程。</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200530142426537.png" alt="image-20200530142426537"></p>
<p>检测死锁的算法:</p>
<p>1)在资源分配图中，找出既不阻塞又不是孤点的进程Pi (即找出一条有向边与它相连，且该有向边对应资源的申请数量小于等于系统中已有空闲资源数量。如下图中，R1没有空闲资源，R2有一个空闲资源。若所有的连接该进程的边均满足上述条件，则这个进程能继续运行直至完成，然后释放它所占有的所有资源)。消去它所有的请求边和分配变，使之称为孤立的结点。在下图中，P1是满足这一条件的进程结点，于是将P1的所有边消去。</p>
<p>2)进程Pi所释放的资源，可以唤醒某些因等待这些资源而阻塞的进程，原来的阻塞进程可能变为非阻塞进程。在下图中，P2 就满足这样的条件。根据1)中的方法进行一系列简化后，若能消去途中所有的边，则称该图是可完全简化的。</p>
<ul>
<li>死锁定理:如果某时刻系统的资源分配图是不可完全简化的，那么此时系统死锁 </li>
</ul>

        <h4 id="死锁的解除">
          <a href="#死锁的解除" class="heading-link"><i class="fas fa-link"></i></a>死锁的解除</h4>
      <p>一旦检测出死锁的发生，就应该立即解除死锁。</p>
<p>补充:并不是系统中所有的进程都是死锁状态，用死锁检测算法化简资源分配图后，还连着边的那些进程就是死锁进程那些进程就是死锁进程</p>
<p>解除死锁的主要方法有:</p>
<ol>
<li><p>资源剥夺法。挂起(暂时放到外存上)某些死锁进程，并抢占它的资源，将这些资源分配给其他的死锁进程。但是应防止被挂起的进程长时间得不到资源而饥饿。</p>
</li>
<li><p>撤销进程法(或称终止进程法)。强制撤销部分、甚至全部死锁进程，并剥夺这些进程的资源。这种方式的优点是实现简单，但所付出的代价可能会很大。因为有些进程可能已经运行了很长时间，已经接近结束了，一旦被终止可谓功亏一篑，以后还得从头再来。</p>
</li>
<li><p>进程回退法。让一个或多个死锁进程回退到足以避免死锁的地步。这就要求系统要记录进程的历史信息，设置还原点。</p>
</li>
</ol>
<p>如何决定“对谁动手”</p>
<ol>
<li><p>进程优先级</p>
</li>
<li><p>已执行多长时间</p>
</li>
<li><p>还要多久能完成</p>
</li>
<li><p>进程已经使用了多少资源</p>
</li>
<li><p>进程是交互式的还是批处</p>
</li>
</ol>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200530144825770.png" alt="image-20200530144825770"></p>
]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统第三章</title>
    <url>/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
    <content><![CDATA[<p>内存、分页</p>
<a id="more"></a>


        <h2 id="内存的基础知识">
          <a href="#内存的基础知识" class="heading-link"><i class="fas fa-link"></i></a>内存的基础知识</h2>
      
        <h3 id="什么是内存，有什么作用">
          <a href="#什么是内存，有什么作用" class="heading-link"><i class="fas fa-link"></i></a>什么是内存，有什么作用</h3>
      <p>内存是用于存放数据的硬件。程序执行前需要先放到内存中才能被CPU处理。</p>
<p><img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530162354662.png" alt="image-20200530162354662"></p>

        <h3 id="常用的数量单位">
          <a href="#常用的数量单位" class="heading-link"><i class="fas fa-link"></i></a>常用的数量单位</h3>
      <p><img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530162526704.png" alt="image-20200530162526704"></p>

        <h3 id="进程的运行原理——指令">
          <a href="#进程的运行原理——指令" class="heading-link"><i class="fas fa-link"></i></a>进程的运行原理——指令</h3>
      <p>可见，我们写的代码要翻译成CPU能识别的指令。这些指令会告诉CPU应该去内存的哪个地址存/取数据,这个数据应该做什么样的处理。在这个例子中，指令中直接给出了变量x的实际存放地址(物理地址)。但实际在生成机器指令的时候并不知道该进程的数据会被放到什么位置。所以编译生成的指令中–般是使用逻辑地址(相对地址)。</p>

        <h3 id="逻辑地址vs物理地址">
          <a href="#逻辑地址vs物理地址" class="heading-link"><i class="fas fa-link"></i></a>逻辑地址vs物理地址</h3>
      <p>住酒店时酒店给你们安排了4个房号相连的房间。四个人按学号递增次序入住房间。比如0、1、2、3号同学分别入住了5、6、7、8号房间。</p>
<p>四个人的编号0、1、2、3其实是一个“相对位置”，而各自入住的房间号是一个“绝对位置”。</p>
<p>只要知道0号同学住的是房号为N的房间，那么M号同学的房号一定是N+M。</p>
<p>也就是说，只要知道各个同学的“相对位置”和“起始房号”，就一定可以算出所有同学的“绝对位置“</p>
<p><img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530163329711.png" alt="image-20200530163329711"></p>

        <h3 id="从写程序到程序运行">
          <a href="#从写程序到程序运行" class="heading-link"><i class="fas fa-link"></i></a>从写程序到程序运行</h3>
      <p>编译:由编译程序将用户源代码编译成若干个目标模块(编译就是把高级语言翻译为机器语言)</p>
<p>链接:由链接程序将编译后形成的一组目标模块，以及所需库函数链接在一起，形成一个完整的装入模块</p>
<p>装入(装载) :由装入程序将装入模块装入内存运行</p>
<p><img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530163514719.png" alt="image-20200530163514719"></p>

        <h3 id="装入板块装入内存">
          <a href="#装入板块装入内存" class="heading-link"><i class="fas fa-link"></i></a>装入板块装入内存</h3>
      <p>装入的三种方式(用三种不同的方法完成逻辑地址到物理地址的转换);</p>
<ol>
<li><p>绝对装入</p>
</li>
<li><p>静态重定位</p>
</li>
<li><p>动态重定位</p>
</li>
</ol>

        <h4 id="绝对装入">
          <a href="#绝对装入" class="heading-link"><i class="fas fa-link"></i></a>绝对装入</h4>
      <p>绝对装入:在编译时，如果知道程序将放到内存中的哪个位置，编译程序将产生绝对地址的目标代码。装入程序按照装入模块中的地址，将程序和数据装入内存。</p>
<p><img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530184423631.png" alt="image-20200530184423631"></p>
<ul>
<li><p>绝对装入只适用于单道程序环境。</p>
</li>
<li><p>程序中使用的绝对地址，可在编译或汇编时给出，也可由程序员直接赋予。通常情况下都是编译或汇编时再转换为绝对地址。</p>
</li>
</ul>

        <h4 id="静态重定位">
          <a href="#静态重定位" class="heading-link"><i class="fas fa-link"></i></a>静态重定位</h4>
      <p>静态重定位:又称可重定位装入。编译、链接后的装入模块的地址:都是从0开始的，指令中使用的地址、数据存放的地址都是相对于起始地址而言的逻辑地址。可根据内存的当前情况，将装入模块装入到内存的适当位置。装入时对地址进行“重定位”，将逻辑地址变换为物理地址(地址变换是在装入时一次完成的)。</p>
<p><img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530185309511.png" alt="image-20200530185309511"></p>
<ul>
<li>静态重定位的特点是在一个作业装入内存时，必须分配其要求的全部内存空间，如果没有足够的内存，就不能装入该作业。作业一旦进入内存后， 在运行期间就不能再移动，也不能再申请内存空间。</li>
</ul>

        <h4 id="动态重定位">
          <a href="#动态重定位" class="heading-link"><i class="fas fa-link"></i></a>动态重定位</h4>
      <p>动态重定位:又称动态运行时装入。编译、链接后的装入模块的地址都是从0开始的。装入程序把装入模块装入内存后，并不会立即把逻辑地址转换为物理地址，而是把地址转换推迟到程序真正要执行时才进行。因此装入内存后所有的地址依然是逻辑地址。这种方式需要-一个重定位寄存器的支持。</p>
<p><img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530185832833.png" alt="image-20200530185832833"></p>
<ul>
<li>采用动态重定位时允许程序在内存中发生移动。</li>
<li>并且可将程序分配到不连续的存储区中:在程序运行前只需装入它的部分代码即可投入运行，然后在程序运行期间，根据需要动态申请分配内存:便于程序段的共享，可以向用户提供一个比存储空间大得多的地址空间。</li>
</ul>

        <h3 id="链接的三种方式">
          <a href="#链接的三种方式" class="heading-link"><i class="fas fa-link"></i></a>链接的三种方式</h3>
      <p>链接的三种方式:</p>
<ol>
<li><p>静态链接:在程序运行之前，先将各目标模块及它们所需的库函数连接成一个完整的可执行文件(装入模块)之后不再拆开。</p>
</li>
<li><p>装入时动态链接:将各目标模块装入内存时，边装入边链接的链接方式。</p>
</li>
<li><p>运行时动态链接:在程序执行中需要该目标模块时，才对它进行链接。其优点是便于修改和更新，便于实现对目标模块的共享。</p>
</li>
</ol>
<p><img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530191425456.png" alt="image-20200530191425456"></p>

        <h2 id="内存管理的概念">
          <a href="#内存管理的概念" class="heading-link"><i class="fas fa-link"></i></a>内存管理的概念</h2>
      
        <h3 id="内存空间的分配与回收">
          <a href="#内存空间的分配与回收" class="heading-link"><i class="fas fa-link"></i></a>内存空间的分配与回收</h3>
      <p><img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530192158345.png" alt="image-20200530192158345"></p>
<p>操作系统作为系统资源的管理者，当然也需要对内存进行管理，要管些什么呢?</p>
<p>1.操作系统负责内存空间的分配与回收</p>
<p>2.操作系统需要提供某种技术从逻辑上对内存空间进行扩充</p>
<p>3.操作系统需要提供地址转换功能，负责程序的逻辑地址与物理地址的转换（过程称为地址重定位）</p>
<p><img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530192740033.png" alt="image-20200530192740033"></p>
<p>4.内存保护：操作系统需要提供内存保护功能。保证各进程在各自存储空间内</p>
<img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530193122346.png" alt="image-20200530193122346" style="zoom:80%;">

<p>内存保护可采取两种方法:</p>
<ul>
<li>方法一:在CPU中设置一对上、下限寄存器，存放进程的上、下限地址。 进程的指令要访问某个地址时，CPU检查是否越界。</li>
</ul>
<img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530193253148.png" alt="image-20200530193253148" style="zoom:80%;">

<ul>
<li>方法二:采用重定位寄存器(又称基址寄存器)和界地址寄存器(又称限长寄存器)进行越界检查。重定位寄存器中存放的是进程的起始物理地址。界地址寄存器中存放的是进程的最大逻辑地址。</li>
</ul>
<p><img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530193512380.png" alt="image-20200530193512380"></p>
<p><img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530193550955.png" alt="image-20200530193550955"></p>

        <h2 id="覆盖与交换">
          <a href="#覆盖与交换" class="heading-link"><i class="fas fa-link"></i></a>覆盖与交换</h2>
      
        <h3 id="覆盖技术">
          <a href="#覆盖技术" class="heading-link"><i class="fas fa-link"></i></a>覆盖技术</h3>
      <p>早期的计算机内存很小，比如IBM推出的第一台PC机最大只支持1MB大小的内存。因此经常会出现内存大小不够的情况。</p>
<p>后来人们引入了覆盖技术，用来解决“程序大小超过物理内存总和”的问题</p>
<p>覆盖技术的思想:将程序分为多个段(多个模块)。常用的段常驻内存，不常用的段在需要时调入内存。内存中分为-一个“固定区”和若干个“覆盖区”。</p>
<p>需要常驻内存的段放在“固定区”中，调入后就不再调出(除非运行结束)。不常用的段放在“覆盖区，需要用到时调入内存, 用不到时调出内存。</p>
<p><img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530220826059.png" alt="image-20200530220826059"></p>
<p>必须由程序员声明覆盖结构，操作系统完成自动覆盖。缺点:对用户不透明，增加了用户编程负担。</p>
<p>覆盖技术只用于早期的操作系统中，现在已成为历史。</p>

        <h3 id="交换技术">
          <a href="#交换技术" class="heading-link"><i class="fas fa-link"></i></a>交换技术</h3>
      <p>交换(对换)技术的设计思想:内存空间紧张时，系统将内存中某些进程暂时换出外存，把外存中某些已具备运行条件的进程换入内存(进程在内存与磁盘间动态调度)</p>
<ol>
<li><p>应该在外存(磁盘)的什么位置保存被换出的进程?</p>
<p>具有对换功能的操作系统中，通常把磁盘空间分为文件区和对换区两部分。文件区主要用于存放文件，主要追求存储空间的利用率，因此对文件区空间的管理采用离散分配方式;对换区空间只占磁盘空间的小部分，被换出的进程数据就存放在对换区。由于对换的速度直接影响到系统的整体速度，因此对换区空间的管理主要追求换入换出速度，因此通常对换区采用连续分配方式(学过文件管理章节后即可理解)。总之，对换区的I/O速度比文件区的更快。</p>
</li>
<li><p>什么时候应该交换?</p>
<p>交换通常在许多进程运行且内存吃紧时进行，而系统负荷降低就暂停。例如:在发现许多进程运行时经常发生缺页，就说明内存紧张，此时可以换出一-些进程;如果缺页率明显下降，就可以暂停换出。</p>
</li>
<li><p>应该换出哪些进程?</p>
<p>可优先换出阻塞进程;可换出优先级低的进程;为了防止优先级低的进程在被调入内存后很快又被换出，有的系统还会考虑进程在内存的驻留时间…</p>
<p>（注意：PCB会常驻内存，不会被换出外存）</p>
</li>
</ol>
<img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530223017095.png" alt="image-20200530223017095" style="zoom:80%;">

<p><img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530223208559.png" alt="image-20200530223208559"></p>

        <h2 id="连续分配管理方式">
          <a href="#连续分配管理方式" class="heading-link"><i class="fas fa-link"></i></a>连续分配管理方式</h2>
      <p>连续分配：指为用户进程分配的必须是一个连续的内存空间。</p>

        <h3 id="单一连续分配">
          <a href="#单一连续分配" class="heading-link"><i class="fas fa-link"></i></a>单一连续分配</h3>
      <p>在单一连续分配方式中，内存被分为系统区和用户区。</p>
<p>系统区通常位于内存的低地址部分，用于存放操作系统相关数据;用户区用于存放用户进程相关数据。内存中只能有一道用户程序，用户程序独占整个用户区空间。</p>
<ul>
<li><p>优点:实现简单;无外部碎片;可以采用覆盖技术扩充内存;不一-定需要采取内存保护(eg:早期的PC操作系统MS-DOS)。</p>
</li>
<li><p>缺点:只能用于单用户、单任务的操作系统中;有内部碎片;存储器利用率极低。</p>
</li>
</ul>
<p>内部碎片:分配给某进程的内存区域中，如果有些部分没有用上，就是“内部碎片”。</p>
<img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530224753337.png" alt="image-20200530224753337" style="zoom:80%;">


        <h3 id="固定分区分配">
          <a href="#固定分区分配" class="heading-link"><i class="fas fa-link"></i></a>固定分区分配</h3>
      <p>20世纪60年代出现了支持多道程序的系统，为了能在内存中装入多道程序，且这些程序之间又不会相互干扰，于是将整个用户空间划分为若千个固定大小的分区，在每个分区中只装入一道作业，这样就形成了最早的、最简单的一种可运行多道程序的内存管理方式。</p>
<img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530225240250.png" alt="image-20200530225240250" style="zoom: 67%;">

<p>分区大小相等:缺乏灵活性，但是很适合用于用一台计算机控制多个相同对象的场合(比如:钢铁厂有n个相同的炼钢炉，就可把内存分为n个大小相等的区域存放n个炼钢炉控制程序)</p>
<p>分区大小不等:增加了灵活性，可以满足不同大小的进程需求。根据常在系统中运行的作业大小情况进行划分(比如:划分多个小分区、适量中等分区、少量大分区)</p>
<img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530225308208.png" alt="image-20200530225308208" style="zoom:67%;">

<p>操作系统需要建立一个数据结构——分区说明表，来实现各个分区的分配与回收。每个表项对应一一个分区，通常按分区大小排列。每个表项包括对应分区的大小、起始地址、状态(是否已分配)。</p>
<p><img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530225740246.png" alt="image-20200530225740246"></p>
<p>当某用户程序要装入内存时，由操作系统内核程序根据用户程序大小检索该表，从中找到一个能满足大小的、未分配的分区，将之分配给该程序，然后修改状态为“已分配’</p>
<ul>
<li><p>优点:实现简单，无外部碎片。</p>
</li>
<li><p>缺点: a. 当用户程序太大时，可能所有的分区都不能满足需求，此时不得不采用覆盖技术来解决，但这又会降低性能; b. 会产生内部碎片，内存利用率低。</p>
</li>
</ul>

        <h3 id="动态分区分配">
          <a href="#动态分区分配" class="heading-link"><i class="fas fa-link"></i></a>动态分区分配</h3>
      <p>动态分区分配又称为可变分区分配。这种分配方式不会预先划分内存分区，而是在进程装入内存时，根据进程的大小动态地建立分区，并使分区的大小正好适合进程的需要。因此系统分区的大小和数目是可变的。(eg: 假设某计算机内存大小为64MB，系统区8MB，用户区共56 M…)</p>
<img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530230204917.png" alt="image-20200530230204917" style="zoom:80%;">

<ol>
<li>系统要有什么样的数据结构记录内存的使用情况？</li>
</ol>
<p><img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530230406651.png" alt="image-20200530230406651"></p>
<ol start="2">
<li>当很多个空闲分区都能满足需求时，应该选择哪个分区进行分配？</li>
</ol>
<p><img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530230937554.png" alt="image-20200530230937554"></p>
<ol start="3">
<li><p>如何进行分区的分配与回收操作?</p>
<p>假设系统采用的数据结构是“空闲分区表”如何分配?</p>
</li>
</ol>
<p>这个分为几种不同情况比较容易理解，不放截图了，放了我也看不懂。</p>
<hr>
<p>动态分区分配没有内部碎片，但是有外部碎片。</p>
<ul>
<li><p>内部碎片，分配给某进程的内存区域中，如果有些部分没有用上。</p>
</li>
<li><p>外部碎片，是指内存中的某些空闲分区由于太小而难以利用。</p>
</li>
</ul>
<p>如果内存中空闲空间的总和本来可以满足某进程的要求，但由于进程需要的是一整块连续的内存空间，因此这些“碎片”不能满足进程的需求。可以通过紧凑(拼凑，Compaction) 技术来解决外部碎片。</p>
<hr>
<p><img src="/2020/05/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%B8%89%E7%AB%A0/image-20200530231958300.png" alt="image-20200530231958300"></p>

        <h2 id="动态分区分配算法">
          <a href="#动态分区分配算法" class="heading-link"><i class="fas fa-link"></i></a>动态分区分配算法</h2>
      ]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>IP基础知识</title>
    <url>/2020/05/11/IP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p><span class="exturl"><a class="exturl__link" href="https://mp.weixin.qq.com/s/qydIO7NDfFTYs4-ZZlfgRg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/qydIO7NDfFTYs4-ZZlfgRg</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>这是我在微信公众号上看到的一篇文章。</p>
]]></content>
  </entry>
  <entry>
    <title>30种常见颜色代码</title>
    <url>/2020/05/09/30%E7%A7%8D%E5%B8%B8%E8%A7%81%E9%A2%9C%E8%89%B2%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>参考资料：<span class="exturl"><a class="exturl__link" href="http://baike.baidu.com/l/XFkkrKXW?bk_share=copy" target="_blank" rel="noopener">百度百科-颜色码</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<a id="more"></a>

<p>浅粉色  #FFB6C1</p>
<p>粉红 FFC0CB</p>
<p>猩红 #DC143C</p>
<p>脸红的淡紫色  #FFF0F5</p>
<p>苍白的紫罗兰红色#DB7093</p>
<p>热情的粉红  #FF69B4</p>
<p>深粉色  #FF1493</p>
<p>适中的紫罗兰红色  #C71585</p>
<p>兰花的紫色  #DA70D6</p>
<p>蓟  #D8BFD8</p>
<p>李子   #DDA0DD</p>
<p>紫罗兰  #EE82EE</p>
<p>洋红  #FF00FF</p>
<p>灯笼海棠（紫红）#FF00FF</p>
<p>深洋红色  #8B008B</p>
<p>紫色  #800080</p>
<p>适中的兰花紫  #BA55D3</p>
<p>深<span class="exturl"><a class="exturl__link" href="https://www.baidu.com/s?wd=紫罗兰色&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">紫罗兰色</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>   #9400D3</p>
<p>深兰花紫  #9932CC</p>
<p>靛青   #4B0082</p>
<p>深紫罗兰的蓝色  #8A2BE2</p>
<p>适中的紫色   #9370DB</p>
<p>暗蓝灰色  #7B68EE</p>
<p>板岩暗蓝灰色  #6A5ACD</p>
<p>深岩暗蓝灰色  #483D8B</p>
<p>薰衣草花的淡紫色  #E6E6FA</p>
<p>幽灵的白色    #F8F8FF</p>
<p>纯蓝   #0000FF</p>
<p>适中的蓝色   #0000CD</p>
<p>午夜的蓝色   #191970</p>
<p>深蓝色    #00008B</p>
<p>海军蓝    #000080</p>
<p>宝蓝    #4169E1</p>
<p>矢车菊的蓝色   #6495ED</p>
<p>淡钢蓝           #B0C4DE</p>
<p>爱丽丝蓝         #F0F8FF</p>
<p>钢蓝             #4682B4</p>
<p>淡蓝色           #87CEFA</p>
<p>天蓝色           #87CEEB</p>
]]></content>
      <tags>
        <tag>颜色代码</tag>
      </tags>
  </entry>
  <entry>
    <title>接口和抽象类的区别是什么？</title>
    <url>/2020/05/06/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<p>接口和抽象类的区别是什么？</p>
<ol>
<li>接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。</li>
<li>接口中除了 static、final 变量，不能有其他变量，而抽象类中则不一定。</li>
<li>一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过 extends 关键字扩展多个接口。</li>
<li>接口方法默认修饰符是 public，抽象方法可以有 public、protected 和 default 这些修饰符（抽象方法就是为了被重写所以不能使用 private 关键字修饰！）。</li>
<li>从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。</li>
</ol>
<blockquote>
<p>备注：</p>
<ol>
<li>在 JDK8 中，接口也可以定义静态方法，可以直接用接口名调用。实现类和实现是不可以调用的。如果同时实现两个接口，接口中定义了一样的默认方法，则必须重写，不然会报错。(详见 issue:<span class="exturl"><a class="exturl__link" href="https://github.com/Snailclimb/JavaGuide/issues/146。" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide/issues/146。</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>jdk9 的接口被允许定义私有方法 。</li>
</ol>
</blockquote>
<p>总结一下 jdk7~jdk9 Java 中接口概念的变化（<span class="exturl"><a class="exturl__link" href="https://www.geeksforgeeks.org/private-methods-java-9-interfaces/" target="_blank" rel="noopener">相关阅读</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>）：</p>
<ol>
<li>在 jdk 7 或更早版本中，接口里面只能有常量变量和抽象方法。这些接口方法必须由选择实现接口的类实现。</li>
<li>jdk8 的时候接口可以有默认方法和静态方法功能。</li>
<li>Jdk 9 在接口中引入了私有方法和私有静态方法。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hexo-常用命令</title>
    <url>/2020/05/06/Hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>（1）<code>$ hexo g</code>或<code>$ hexo generate</code></strong><br> 该命令执行后在<code>hexo</code>站点根目录下生成<code>public</code>文件夹</p>
<p><strong>（2）<code>$ hexo clean</code></strong><br> 把（1）中的<code>public</code>文件夹删除</p>
<p><strong>（3）<code>$ hexo s</code>或<code>$ hexo server</code></strong><br> 启动服务预览</p>
<p><strong>（4）<code>$ hexo d</code>或<code>$ hexo deploy</code></strong><br> 部署站点，在本地生成<code>.deploy_git</code>文件夹，并将编译后的文件上传至 GitHub。</p>
<p><strong>（5）<code>$ hexo new [layout]</code></strong><br> 例如：<code>$ hexo new photo “my-first-blog”</code><br> 上述指令执行时，Hexo 会尝试在 scaffolds 中寻找photo.md布局，若找到，则根据该布局新建文章；若未找到或指令中未指定该参数，则使用post.md新建文章。新建文章的名称在_config.yml中配置。</p>
<p><strong>（6）删除文章</strong><br> 只需在本地把<code>source/_posts</code>文件夹下的文章源文件删除后，执行以下命令重新部署即可。</p>
<figure class="highlight cpp"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo clean <span class="comment">// 一定要先 clean，防止灵异事件发生</span></span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></div></figure>

<p>作者：四喜汤圆<br>链接：<span class="exturl"><a class="exturl__link" href="https://www.jianshu.com/p/7ba00af8da13" target="_blank" rel="noopener">https://www.jianshu.com/p/7ba00af8da13</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>来源：简书</p>
]]></content>
  </entry>
  <entry>
    <title>重载和重写的区别</title>
    <url>/2020/05/06/%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理</p>
<p>重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法</p>
<div class="table-container"><table>
<thead>
<tr>
<th>区别点</th>
<th>重载方法</th>
<th>重写方法</th>
</tr>
</thead>
<tbody><tr>
<td>发生范围</td>
<td>同一个类</td>
<td>子类 中</td>
</tr>
<tr>
<td>参数列表</td>
<td>必须修改</td>
<td>一定不能修改</td>
</tr>
<tr>
<td>返回类型</td>
<td>可修改</td>
<td>一定不能修改</td>
</tr>
<tr>
<td>异常</td>
<td>可修改</td>
<td>可以减少或删除，一定不能抛出新的或者更广的异常</td>
</tr>
<tr>
<td>访问修饰符</td>
<td>可修改</td>
<td>一定不能做更严格的限制（可以降低限制）</td>
</tr>
<tr>
<td>发生阶段</td>
<td>编译期</td>
<td>运行期</td>
</tr>
</tbody></table></div>
]]></content>
  </entry>
  <entry>
    <title>Java和C++的区别</title>
    <url>/2020/05/06/Java%E5%92%8CC++%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<ul>
<li>都是面向对象的语言，都支持封装、继承和多态</li>
<li>Java 不提供指针来直接访问内存，程序内存更加安全</li>
<li>Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。</li>
<li>Java 有自动内存管理机制，不需要程序员手动释放无用内存</li>
<li><strong>在 C 语言中，字符串或字符数组最后都会有一个额外的字符‘\0’来表示结束。但是，Java 语言中没有结束符这一概念。</strong></li>
</ul>
]]></content>
  </entry>
</search>
