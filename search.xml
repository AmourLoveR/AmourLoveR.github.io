<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Js四则运算类型转换</title>
      <link href="/2020/11/30/Js%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2020/11/30/Js%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>四则运算中，当一个数值和一个字符串进行运算时，除了加号会把数值自动转换成字符串，其他的乘法，除法，减法，都会把字符串自动转化成数值。</p><a id="more"></a><p>加法运算符不同于其他几个运算符，它有以下几个特点：</p><ul><li>运算中其中一方为字符串，那么就会把另一方也转换成字符串</li><li>如果一方不是字符串或者数字，那么会将它转换为数字或者字符串</li></ul><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>+<span class="string">'1'</span> <span class="comment">// '11'</span></span><br><span class="line"><span class="literal">true</span>+<span class="literal">true</span> <span class="comment">// 2</span></span><br><span class="line"><span class="number">4</span>+[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="comment">// '41,2,3'</span></span><br></pre></td></tr></table></div></figure><p>另外<code>&#39;a&#39;+ +&#39;b&#39;</code>这种情况需要注意，两个+之间有空格，不然会报错。<code>+变量类型</code>会被转成Number类型。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a'</span>+ +<span class="string">'b'</span> <span class="comment">// aNaN</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">'b'</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(+[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">'1'</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js深拷贝与浅拷贝</title>
      <link href="/2020/11/25/Js%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2020/11/25/Js%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<p>在vue项目中调用后端接口，传递参数时会发现本来传递的参数值全部重置，希望的情况是在参数传递给接口完成后，将参数重置。方法中的代码如下。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'addUser'</span>,<span class="keyword">this</span>.addUserInfo).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.addUserInfo) <span class="comment">//对象中的元素值全是''</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.addUserInfo.userName = <span class="string">''</span>,</span><br><span class="line"><span class="keyword">this</span>.addUserInfo.userEmail = <span class="string">''</span>,</span><br><span class="line"><span class="keyword">this</span>.addUserInfo.userPassword = <span class="string">''</span>,</span><br></pre></td></tr></table></div></figure><a id="more"></a>        <h2 id="JavaScript的两种变量类型">          <a href="#JavaScript的两种变量类型" class="heading-link"><i class="fas fa-link"></i></a>JavaScript的两种变量类型</h2>      <p>JavaScript变量的类型分为两种， 基本类型和引用类型，其中基本类型是指简单的数据段，有5种 ： Undefined、 Null、 Boolean、 Number 和 String。引用类型是指可能有多个值构成的对象，一般为： Object, Array, function 等。</p><p>为什么要先说变量类型呢，是因为基本类型是<strong>按值访问</strong>的，不会影响到其他数据。所以基本类型的值没有深拷贝的概念。</p><p>而引用类型的值是<strong>按地址访问</strong>的，简单的赋值，实际上只是把地址复制了一遍，修改任意一个值会影响到另外一个。</p><p>上面的<code>this.addUserInfo</code>是对象，是按地址访问的，所以在接口里面返回参数时显示的是重置之后的对象，这中间还涉及到同步异步的问题。</p>        <h2 id="什么是深拷贝浅拷贝">          <a href="#什么是深拷贝浅拷贝" class="heading-link"><i class="fas fa-link"></i></a>什么是深拷贝浅拷贝</h2>      <p>所以浅拷贝和深拷贝（也叫浅复制和深复制）的概括解释为：<br> 对基本类型变量，浅拷贝是对值的拷贝，没有深拷贝的概念。<br> 对引用类型来说，浅拷贝是对对象地址的拷贝，并没有开辟新的栈，复制的结果是两个对象指向同一个地址，修改其中一个对象的属性，另外一个对象的属性也会改变， 而深拷贝则是开辟新的栈。</p>        <h2 id="深拷贝的实现">          <a href="#深拷贝的实现" class="heading-link"><i class="fas fa-link"></i></a>深拷贝的实现</h2>              <h3 id="转JSON再解析回来">          <a href="#转JSON再解析回来" class="heading-link"><i class="fas fa-link"></i></a>转JSON再解析回来</h3>      <p>原理： 用JSON.stringify将对象转成JSON字符串，再用JSON.parse()把字符串解析成对象，一来一回之间，新的对象产生了，而且对象会开辟新的栈，实现深拷贝</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'addUser'</span>,<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.addUserInfo))).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.addUserInfo) <span class="comment">//这时候就是写入的参数了</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.addUserInfo.userName = <span class="string">''</span>,</span><br><span class="line"><span class="keyword">this</span>.addUserInfo.userEmail = <span class="string">''</span>,</span><br><span class="line"><span class="keyword">this</span>.addUserInfo.userPassword = <span class="string">''</span>,</span><br><span class="line"><span class="keyword">this</span>.addUserDialog = <span class="literal">false</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;v-slot&#39; directive doesn&#39;t support any modifier</title>
      <link href="/2020/11/24/UserAdmin-vue%E4%B8%ADv-slot%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/11/24/UserAdmin-vue%E4%B8%ADv-slot%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>UserAdmin.vue中v-slot作用域插槽问题。在Vuetify中的<v-data-table>使用中遇到了一个bug，但是不会对项目的运行有影响</v-data-table></p><a id="more"></a><p>链接：<span class="exturl"><a class="exturl__link" href="https://v2.vuetifyjs.com/zh-Hans/components/data-tables/" target="_blank" rel="noopener">数据表组件—Vuetify.js</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-slot:item.actions&#x3D;&quot;&#123; item &#125;&quot;&gt;</span><br><span class="line">&lt;v-icon</span><br><span class="line">        small</span><br><span class="line">        class&#x3D;&quot;mr-2&quot;</span><br><span class="line">        @click&#x3D;&quot;editItem(item)&quot;</span><br><span class="line">        &gt;</span><br><span class="line">    mdi-pencil</span><br><span class="line">    &lt;&#x2F;v-icon&gt;</span><br><span class="line">&lt;v-icon</span><br><span class="line">        small</span><br><span class="line">        @click&#x3D;&quot;deleteItem(item)&quot;</span><br><span class="line">        &gt;</span><br><span class="line">    mdi-delete</span><br><span class="line">    &lt;&#x2F;v-icon&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></div></figure><p>在<code>v-slot:item.actions=&quot;{ item }&quot;</code>上提示’v-slot’ directive doesn’t support any modifier错误</p><p>将<code>v-slot:item.actions=&quot;{ item }&quot;</code>改成<code>v-slot:[`item.actions`]=&quot;{ item }]&quot;</code>错误就消失了。</p><p>为什么会这样，我暂时还没搞懂。</p>]]></content>
      
      
      
        <tags>
            
            <tag> v-slot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP基础知识</title>
      <link href="/2020/05/11/IP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/05/11/IP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p><span class="exturl"><a class="exturl__link" href="https://mp.weixin.qq.com/s/qydIO7NDfFTYs4-ZZlfgRg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/qydIO7NDfFTYs4-ZZlfgRg</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>这是我在微信公众号上看到的一篇文章。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-常用命令</title>
      <link href="/2020/05/06/Hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/05/06/Hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><strong>（1）<code>$ hexo g</code>或<code>$ hexo generate</code></strong><br> 该命令执行后在<code>hexo</code>站点根目录下生成<code>public</code>文件夹</p><p><strong>（2）<code>$ hexo clean</code></strong><br> 把（1）中的<code>public</code>文件夹删除</p><p><strong>（3）<code>$ hexo s</code>或<code>$ hexo server</code></strong><br> 启动服务预览</p><p><strong>（4）<code>$ hexo d</code>或<code>$ hexo deploy</code></strong><br> 部署站点，在本地生成<code>.deploy_git</code>文件夹，并将编译后的文件上传至 GitHub。</p><p><strong>（5）<code>$ hexo new [layout]</code></strong><br> 例如：<code>$ hexo new photo “my-first-blog”</code><br> 上述指令执行时，Hexo 会尝试在 scaffolds 中寻找photo.md布局，若找到，则根据该布局新建文章；若未找到或指令中未指定该参数，则使用post.md新建文章。新建文章的名称在_config.yml中配置。</p><p><strong>（6）删除文章</strong><br> 只需在本地把<code>source/_posts</code>文件夹下的文章源文件删除后，执行以下命令重新部署即可。</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean <span class="comment">// 一定要先 clean，防止灵异事件发生</span></span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></div></figure><p>作者：四喜汤圆<br>链接：<span class="exturl"><a class="exturl__link" href="https://www.jianshu.com/p/7ba00af8da13" target="_blank" rel="noopener">https://www.jianshu.com/p/7ba00af8da13</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>来源：简书</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
