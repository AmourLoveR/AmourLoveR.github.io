<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>First</title>
    <url>/2020/05/03/First/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hexo-常用命令</title>
    <url>/2020/05/06/Hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>（1）<code>$ hexo g</code>或<code>$ hexo generate</code></strong><br> 该命令执行后在<code>hexo</code>站点根目录下生成<code>public</code>文件夹</p>
<p><strong>（2）<code>$ hexo clean</code></strong><br> 把（1）中的<code>public</code>文件夹删除</p>
<p><strong>（3）<code>$ hexo s</code>或<code>$ hexo server</code></strong><br> 启动服务预览</p>
<p><strong>（4）<code>$ hexo d</code>或<code>$ hexo deploy</code></strong><br> 部署站点，在本地生成<code>.deploy_git</code>文件夹，并将编译后的文件上传至 GitHub。</p>
<p><strong>（5）<code>$ hexo new [layout]</code></strong><br> 例如：<code>$ hexo new photo “my-first-blog”</code><br> 上述指令执行时，Hexo 会尝试在 scaffolds 中寻找photo.md布局，若找到，则根据该布局新建文章；若未找到或指令中未指定该参数，则使用post.md新建文章。新建文章的名称在_config.yml中配置。</p>
<p><strong>（6）删除文章</strong><br> 只需在本地把<code>source/_posts</code>文件夹下的文章源文件删除后，执行以下命令重新部署即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ hexo clean <span class="comment">// 一定要先 clean，防止灵异事件发生</span></span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<p>作者：四喜汤圆<br>链接：<a href="https://www.jianshu.com/p/7ba00af8da13" target="_blank" rel="noopener">https://www.jianshu.com/p/7ba00af8da13</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
  </entry>
  <entry>
    <title>接口和抽象类的区别是什么？</title>
    <url>/2020/05/06/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<p>接口和抽象类的区别是什么？</p>
<ol>
<li>接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。</li>
<li>接口中除了 static、final 变量，不能有其他变量，而抽象类中则不一定。</li>
<li>一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过 extends 关键字扩展多个接口。</li>
<li>接口方法默认修饰符是 public，抽象方法可以有 public、protected 和 default 这些修饰符（抽象方法就是为了被重写所以不能使用 private 关键字修饰！）。</li>
<li>从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。</li>
</ol>
<blockquote>
<p>备注：</p>
<ol>
<li>在 JDK8 中，接口也可以定义静态方法，可以直接用接口名调用。实现类和实现是不可以调用的。如果同时实现两个接口，接口中定义了一样的默认方法，则必须重写，不然会报错。(详见 issue:<a href="https://github.com/Snailclimb/JavaGuide/issues/146。" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide/issues/146。</a></li>
<li>jdk9 的接口被允许定义私有方法 。</li>
</ol>
</blockquote>
<p>总结一下 jdk7~jdk9 Java 中接口概念的变化（<a href="https://www.geeksforgeeks.org/private-methods-java-9-interfaces/" target="_blank" rel="noopener">相关阅读</a>）：</p>
<ol>
<li>在 jdk 7 或更早版本中，接口里面只能有常量变量和抽象方法。这些接口方法必须由选择实现接口的类实现。</li>
<li>jdk8 的时候接口可以有默认方法和静态方法功能。</li>
<li>Jdk 9 在接口中引入了私有方法和私有静态方法。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>重载和重写的区别</title>
    <url>/2020/05/06/%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理</p>
<p>重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法</p>
<table>
<thead>
<tr>
<th>区别点</th>
<th>重载方法</th>
<th>重写方法</th>
</tr>
</thead>
<tbody><tr>
<td>发生范围</td>
<td>同一个类</td>
<td>子类 中</td>
</tr>
<tr>
<td>参数列表</td>
<td>必须修改</td>
<td>一定不能修改</td>
</tr>
<tr>
<td>返回类型</td>
<td>可修改</td>
<td>一定不能修改</td>
</tr>
<tr>
<td>异常</td>
<td>可修改</td>
<td>可以减少或删除，一定不能抛出新的或者更广的异常</td>
</tr>
<tr>
<td>访问修饰符</td>
<td>可修改</td>
<td>一定不能做更严格的限制（可以降低限制）</td>
</tr>
<tr>
<td>发生阶段</td>
<td>编译期</td>
<td>运行期</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>Java和C++的区别</title>
    <url>/2020/05/06/Java%E5%92%8CC++%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<ul>
<li>都是面向对象的语言，都支持封装、继承和多态</li>
<li>Java 不提供指针来直接访问内存，程序内存更加安全</li>
<li>Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。</li>
<li>Java 有自动内存管理机制，不需要程序员手动释放无用内存</li>
<li><strong>在 C 语言中，字符串或字符数组最后都会有一个额外的字符‘\0’来表示结束。但是，Java 语言中没有结束符这一概念。</strong></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>30种常见颜色代码</title>
    <url>/2020/05/09/30%E7%A7%8D%E5%B8%B8%E8%A7%81%E9%A2%9C%E8%89%B2%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h2 id="30种常见颜色代码"><a href="#30种常见颜色代码" class="headerlink" title="30种常见颜色代码"></a>30种常见颜色代码</h2><p>浅粉色  #FFB6C1</p>
<p>粉红 FFC0CB</p>
<p>猩红 #DC143C</p>
<p>脸红的淡紫色  #FFF0F5</p>
<p>苍白的紫罗兰红色#DB7093</p>
<p>热情的粉红  #FF69B4</p>
<p>深粉色  #FF1493</p>
<p>适中的紫罗兰红色  #C71585</p>
<p>兰花的紫色  #DA70D6</p>
<p>蓟  #D8BFD8</p>
<p>李子   #DDA0DD</p>
<p>紫罗兰  #EE82EE</p>
<p>洋红  #FF00FF</p>
<p>灯笼海棠（紫红）#FF00FF</p>
<p>深洋红色  #8B008B</p>
<p>紫色  #800080</p>
<p>适中的兰花紫  #BA55D3</p>
<p>深<a href="https://www.baidu.com/s?wd=紫罗兰色&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">紫罗兰色</a>   #9400D3</p>
<p>深兰花紫  #9932CC</p>
<p>靛青   #4B0082</p>
<p>深紫罗兰的蓝色  #8A2BE2</p>
<p>适中的紫色   #9370DB</p>
<p>暗蓝灰色  #7B68EE</p>
<p>板岩暗蓝灰色  #6A5ACD</p>
<p>深岩暗蓝灰色  #483D8B</p>
<p>薰衣草花的淡紫色  #E6E6FA</p>
<p>幽灵的白色    #F8F8FF</p>
<p>纯蓝   #0000FF</p>
<p>适中的蓝色   #0000CD</p>
<p>午夜的蓝色   #191970</p>
<p>深蓝色    #00008B</p>
<p>海军蓝    #000080</p>
<p>宝蓝    #4169E1</p>
<p>矢车菊的蓝色   #6495ED</p>
<p>淡钢蓝           #B0C4DE</p>
<p>爱丽丝蓝         #F0F8FF</p>
<p>钢蓝             #4682B4</p>
<p>淡蓝色           #87CEFA</p>
<p>天蓝色           #87CEEB</p>
<p>参考资料：<a href="http://baike.baidu.com/l/XFkkrKXW?bk_share=copy" target="_blank" rel="noopener">百度百科-颜色码</a></p>
]]></content>
      <tags>
        <tag>颜色代码</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统</title>
    <url>/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="计算机操作系统"><a href="#计算机操作系统" class="headerlink" title="计算机操作系统"></a>计算机操作系统</h2><a id="more"></a>

<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/gainian.png" alt="gainian"></p>
<p>补充：进程是一个程序的执行过程，执行前需要将该程序放在内存中，才能被CPU处理。</p>
<h3 id="功能和目标"><a href="#功能和目标" class="headerlink" title="功能和目标"></a>功能和目标</h3><ul>
<li><p>作为系统资源的管理者</p>
<ol>
<li><p>功能 ：1、处理机管理2、存储器管理3、文件管理4、设备管理</p>
</li>
<li><p>目标：安全、高效</p>
</li>
</ol>
</li>
<li><p>作为用户和计算机硬件之间的接口</p>
<ol>
<li><p>功能：1、命令接口（联机命令接口、脱机命令接口）2、程序接口——由一组系统调用组成3、GUI（即图形用户界面）            </p>
</li>
<li><p>目标：方便用户使用</p>
<ul>
<li>命令接口：允许用户直接使用</li>
<li>程序接口：允许用户通过程序简介使用=系统调用=广义指令</li>
<li>GUI：现代操作系统中最流行的图形用户接口</li>
</ul>
</li>
</ol>
</li>
</ul>
<ul>
<li>作为最接近硬件的层次——实现对硬件机器的拓展。</li>
</ul>
<h3 id="四个特征"><a href="#四个特征" class="headerlink" title="四个特征"></a>四个特征</h3><ul>
<li><p>操作系统的特征：并发、共享、虚拟、异步。并发和共享是两个最基本的特征，互为存在条件。</p>
<ol>
<li><p>并发：指两个或多个事件在同一时间间隔发生。这些事件宏观上是同时发生的，但微观上是交替发生的。（并行：指两个或多个事件在同一时刻同时发生。）</p>
</li>
<li><p>共享：即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。</p>
<ul>
<li>两种资源共享方式：1、互斥共享方式——一个时间段内只允许一个进程访问该资源。2、同时共享方式——允许一个时间段内有多个进程“同时”对他们进行访问。</li>
</ul>
</li>
<li><p>虚拟：是指把一个物理上的实体变为若干个逻辑上的对应物，物理实体（前者）是实际存在的，而逻辑上的对应物（后者）是用户感受到的。</p>
<ul>
<li><p>虚拟技术：1、空分复用技术（如虚拟存储器技术）。2、时分复用技术（如虚拟处理器）。</p>
</li>
<li><p>没有并发性，就无虚拟性。</p>
</li>
</ul>
</li>
<li><p>异步：在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，以不可预知的速度向前推进。</p>
<ul>
<li>只有系统拥有并发性，才有可能导致异步。</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="OS的发展与分类"><a href="#OS的发展与分类" class="headerlink" title="OS的发展与分类"></a>OS的发展与分类</h3><p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%8F%91%E5%B1%95%E4%B8%8E%E5%88%86%E7%B1%BB.png" alt="发展与分类"></p>
<ol>
<li><p>手工操作阶段</p>
<ul>
<li>主要缺点：用户独占全机，人机速度矛盾导致资源利用率极低。</li>
</ul>
</li>
<li><p>批处理阶段——单道批处理系统</p>
<ul>
<li>引入脱机输入/输出技术（用磁带完成），并监督程序（操作系统的雏形）负责控制作业的输入、输出。</li>
<li>主要优点：缓解了一定程度的人机速度矛盾，资源利用率有所提升。</li>
<li>主要缺点：内存中仅能有一道程序运行，只有该程序运行结束之后才能调入下一道程序。CPU有大量的时间是在空闲等待I/O完成。资源利用率仍然很低。</li>
</ul>
</li>
<li><p>批处理阶段——多道批处理系统</p>
<ul>
<li>主要优点：多道程序并发执行，共享计算机资源。资源利用率大幅提升，CPU和其他资源保持”忙碌”状态，系统吞吐量增大。</li>
<li>主要缺点：用户响应时间长，没有人机交互功能（用户提交自己的作业之后就只能等待计算机处理完成，之间不能控制自己的作业执行）。</li>
</ul>
</li>
<li><p>分时操作系统</p>
<ul>
<li>计算机以时间片为单位轮流为各个用户/作业服务，各个用户可通过终端与计算机进行交互。</li>
<li>主要优点：用户请求可以被及时响应，解决了人机交互问题。允许多个用户同时使用一台计算机，并且用户对计算机的操作相互对立，感受不到别人的存在。</li>
<li>主要缺点：不能优先处理一些紧急任务。操作系统对各个用户/作业都是完全公平的，循环地为每个用户/作业服务一个时间片，不区分任务的紧急性。</li>
</ul>
</li>
<li><p>实时操作系统</p>
<ul>
<li>主要优点：能够优先响应一写紧急任务，某些紧急任务不需时间片排队。</li>
<li>在实时系统的控制下，计算机系统接收到外部信号后及时进行处理，并且要在严格的时限内处理完事件。实时操作系统的主要特点是及时性和可靠性。</li>
<li>实时操作系统分为：1、硬实时系统——必须在绝对严格的规定时间内完成处理（如：导弹控制系统、自动驾驶系统）。2、软实时系统——能接受偶尔违反时间规定（如：12306火车订票系统）。</li>
</ul>
</li>
</ol>
<p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200510170945474.png" alt></p>
]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
</search>
