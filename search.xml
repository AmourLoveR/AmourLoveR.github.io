<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>操作系统第二章</title>
    <url>/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    <content><![CDATA[<p>进程的基本知识以及一些调度算法</p>
<a id="more"></a>


        <h2 id="进程的定义、组成、组织方式…">
          <a href="#进程的定义、组成、组织方式…" class="heading-link"><i class="fas fa-link"></i></a>进程的定义、组成、组织方式…</h2>
      
        <h3 id="进程的定义">
          <a href="#进程的定义" class="heading-link"><i class="fas fa-link"></i></a>进程的定义</h3>
      <p>程序：就是一个指令序列。</p>
<p>早期的计算机（只支持单道程序），CPU、I/O设备、内存都为一道程序服务。</p>
<p>内存（程序段（低地址），数据段（高地址））：程序的代码放在程序段内，程序运行过程处理的数据放在数据段内。</p>
<p>引入多道程序后：</p>
<p>为了方便操作系统管理，完成各程序并发执行，引入了进程、进程实体的概念。</p>
<p>PCB:系统为每个运行的程序配置一个数据结构，称为进程控制块（PCB），用来描述进程的各种信息（如程序代码存放位置）。操作系统通过PCB来管理进程，因此PCB中应该包含操作系统对其进行管理所需的各种信息。</p>
<ul>
<li>PCB、程序段、数据段三部分构成了进程实体（进程映像）。一般情况下，我们把进程实体就简称为进程，例如，所谓创建进程，实质上是创建进程实体中的PCB；而撤销进程，实质上是撤销进程实体中的PCB。注意：PCB是进程存在的唯一标准！</li>
</ul>
<p>从不同的角度，进程可以有不同的定义，比较传统典型的定义有：强调“动态性”</p>
<p>1、进程是程序的一次执行过程。</p>
<p>2、进程是一个程序及其数据在处理机上顺序执行时所发生的活动。</p>
<p>3、进程时具有独立功能的程序在数据集合上运动的过程，它是系统进行资源分配和调度的一个独立单位。</p>
<ul>
<li>引入进程实体的概念后，可把进程定义为：进程时进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</li>
<li>注意：严格来说，进程实体和进程并不一样，进程实体是静态的，进程则是动态的。不过，除非题目专门考察二者的区别，否则可以认为进程实体就是进程。因此我们也可以说“进程由程序段、数据段、PCB三部分组成”。</li>
</ul>

        <h3 id="进程的组成">
          <a href="#进程的组成" class="heading-link"><i class="fas fa-link"></i></a>进程的组成</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200513231930833.png" alt></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200513232239443.png" alt></p>

        <h3 id="进程的组织">
          <a href="#进程的组织" class="heading-link"><i class="fas fa-link"></i></a>进程的组织</h3>
      <p>在一个系统中，通常有数十、数百乃至数千个PCB。为了能对他们加以有效的管理，应该用适当的方式把这些PCB组织起来。</p>
<p>注：进程的组成讨论的是一个进程内部由哪些部分构成的问题，而进程的组织讨论的是多个进程之间的组织方式问题。</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200513232815464.png" alt></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200513233142008.png" alt></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200513233415673.png" alt></p>

        <h3 id="进程的特征">
          <a href="#进程的特征" class="heading-link"><i class="fas fa-link"></i></a>进程的特征</h3>
      <p>进程和程序是两个截然不同的概念，相比于程序，进程拥有以下特征:</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200513234022035.png" alt></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200513234214997.png" alt></p>

        <h2 id="进程的状态与转换">
          <a href="#进程的状态与转换" class="heading-link"><i class="fas fa-link"></i></a>进程的状态与转换</h2>
      
        <h3 id="状态">
          <a href="#状态" class="heading-link"><i class="fas fa-link"></i></a>状态</h3>
      <p>进程的三种基本状态：</p>
<ul>
<li>运行态（Running）：占有CPU，并在CPU上运行。（注意：单核处理机环境下，每一时刻最多只有一个进程处于运行态。（双核环境下可以同时有两个进程处于运行态））。</li>
<li>就绪态（Ready）：已经具备运行条件，但由于没有空闲CPU，而暂时不能运行（进程已经拥有了除处理机之外所以需要的资源，一旦获得处理机，即可立即进入运行态开始运行。即;万事具备，只欠CPU）。</li>
<li>阻塞态（Waiting/Blocked,又称：等待态）：因等待某一事件而暂时不能运行（如：等待操作系统分配打印机、等待读磁盘操作的结果。CPU是计算机中最昂贵的部件，为了提高CPU的利用率，需要先将其他进程需要的资源分配到位，才能得到CPU的服务）。</li>
</ul>
<p>另外两种状态：</p>
<ul>
<li>创建态（New，又称：新建态）：进程正在被创建，操作系统为进程分配资源、初始化PCB。</li>
<li>终止态（Terminated，又称：结束态）：进程正在从系统中撤销，操作系统会回收进程拥有的资源、撤销PCB。</li>
</ul>

        <h3 id="进程状态的转换">
          <a href="#进程状态的转换" class="heading-link"><i class="fas fa-link"></i></a>进程状态的转换</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200514224158133.png" alt></p>
<p>注意：不能由阻塞态直接转换为运行态，也不能由就绪态直接转换为阻塞态（因为进入阻塞态是进程主动请求的，必然需要进程在运行时才能发出这种请求）</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200514224913672.png" alt></p>

        <h2 id="进程控制">
          <a href="#进程控制" class="heading-link"><i class="fas fa-link"></i></a>进程控制</h2>
      
        <h3 id="基本概念">
          <a href="#基本概念" class="heading-link"><i class="fas fa-link"></i></a>基本概念</h3>
      <p>什么是进程控制？</p>
<ul>
<li>进程控制的主要功能是对系统中的所以进程实施有效的管理，它具有创建新进程、撤销已有进程、实现进程状态转换等功能。    简化理解：反正进程控制就是实现进程状态转换。</li>
</ul>
<p>如何实现进程控制？</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200514232053979.png" alt></p>
<ul>
<li>用原语实现进程控制。原语的特点是执行期间不允许中段，只能一气呵成。这种不可被中断的操作即原子操作。原语采用“关中断指令”和“开中断指令”实现</li>
</ul>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200514233035914.png" alt></p>
<p>显然，关/开中断指令的权限非常大，必然是只允许在核心态下执行的特权指令。</p>

        <h3 id="进程控制相关的原语">
          <a href="#进程控制相关的原语" class="heading-link"><i class="fas fa-link"></i></a>进程控制相关的原语</h3>
      <p>学习技巧:进程控制会导致进程状态的转换。无论哪个原语，要做的无非三类事情:</p>
<ol>
<li><p>更新PCB中 的信息(如修改进程状态标志、将运行环境保存到PCB、从PCB恢复运行环境)</p>
<ul>
<li>a.所有的进程控制原语—定都会修改进程状态标志</li>
<li>b.剥夺当前运行进程的CPU使用权必然需要保存其运行环境</li>
<li>c.某进程开始运行前必然要恢复期运行环境</li>
</ul>
</li>
<li><p>将PCB插入 合适的队列</p>
</li>
<li><p>分配/回收资源</p>
</li>
</ol>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200514234234321.png" alt="进程的创建"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200514234453912.png" alt="进程的终止"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200514234639509.png" alt="进程的阻塞和唤醒"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200514234810349.png" alt="进程的切换"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200514234846316.png" alt></p>

        <h2 id="进程通信">
          <a href="#进程通信" class="heading-link"><i class="fas fa-link"></i></a>进程通信</h2>
      
        <h3 id="什么是进程通信">
          <a href="#什么是进程通信" class="heading-link"><i class="fas fa-link"></i></a>什么是进程通信</h3>
      <p>进程通信就是指进程之间的信息交换。</p>
<p>进程是分配稀土资源的单位（包括内存地址空间），因此个金拥有的内存地址空间相互独立。</p>
<p>为了保证安全，一个进程不能直接访问另外一个进程的地址空间。但是进程之间的信息交换又是必须实现的。为了保证进程间的安全通信操纵系统提供了一些方法。</p>
<ul>
<li>进程通信：1、共享存储。2、消息传递。3、管道通信。</li>
</ul>

        <h3 id="共享存储">
          <a href="#共享存储" class="heading-link"><i class="fas fa-link"></i></a>共享存储</h3>
      <p>操作系统只负责提供共享空间和同步互斥工具（如P、V操作）。两个进程对共享空间的访问必须是互斥的（互斥访问通过操作系统提供的工具实现）。</p>
<ul>
<li>共享存储：1、基于数据结构的共享（比如共享空间里只能放一个长度是10的数组。这种存储方式速度慢、限制多。是一种低级通信方式）。2、基于存储区的共享（在内存中划出一块共享存储区、数据的形式、存放位置都由进程控制，而不是操纵系统：相比之下，这种共享方式速度更快，是一种高级通信方式）。</li>
</ul>

        <h3 id="管道通信">
          <a href="#管道通信" class="heading-link"><i class="fas fa-link"></i></a>管道通信</h3>
      <p>”管道“是指用于连接读写进程的一个共享文件，又名pipe文件。其实就是在内存中开辟一个大小固定的缓冲区。</p>
<ol>
<li><p>管道只能采用半双工通信，某一时间段内只能实现单向的传输。如果要实现双向同时通信，则需要设置两个管道。</p>
</li>
<li><p>各进程要互斥地访问管道。</p>
</li>
<li><p>数据以字符流的形式写入管道，当管道写满时，写进程的write()系统调用将被阻塞，等待读进程将数据取走。当读进程将数据全部取走后，管道变空，此时读进程的read()系统调用将被阻塞。</p>
</li>
<li><p>如果没写满，就不允许读。如果没读空，就不允许写。</p>
</li>
<li><p>数据一旦被读出，就从管道中被拋弃，这就意味着读进程最多只能有一个，否则可能会有读错数据的情况。</p>
</li>
</ol>

        <h3 id="消息传递">
          <a href="#消息传递" class="heading-link"><i class="fas fa-link"></i></a>消息传递</h3>
      <p>进程间的数据交换以格式化的消息（Message）为单位。进程通过操作系统提供的”发送消息/接受消息”连哥哥原语进行数据交换。</p>
<ul>
<li><p>Message：1、消息头（包括：发送进程ID、接受进程ID、消息类型、消息长度等格式化的信息（计算机网络中发送的”报文”其实就是一种格式化的消息））2、消息体</p>
</li>
<li><p>消息传递：1、直接通信方式（消息直接挂到接受进程的消息缓冲队列上）2、间接通信方式（消息要先发送到中间实体（信箱）中，因此也称“信箱通信方式”。Eg:计网中的电子邮件系统）</p>
</li>
</ul>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200515214300696.png" alt></p>

        <h2 id="线程概念和多线程模型">
          <a href="#线程概念和多线程模型" class="heading-link"><i class="fas fa-link"></i></a>线程概念和多线程模型</h2>
      
        <h3 id="什么是线程，为什么引入线程？">
          <a href="#什么是线程，为什么引入线程？" class="heading-link"><i class="fas fa-link"></i></a>什么是线程，为什么引入线程？</h3>
      <p>还没引入线程之前，系统中各个程序只能串行执行地执行一系列程序。为此，引入了“线程”，来增加开发度。传统的进程是程序执行流的最小单位。</p>
<p>引入线程后，线程成为了程序执行流的最小单位。是一个基本的CPU执行单元。可以把线程理解为“轻量级进程”。不仅是进程之间可以并发，进程内的各线程之间也可以并发，进程内的各线程之间也可以并发，从而进一步提高了系统的并发度，使得一个进程内也可以并发处理各种任务（如QQ视频、文字聊天、传文件）。</p>
<p>引入线程后，进程只作为除CPU之外的系统资源的分配单元（如打印机、内存地址空间等都是分配给进程的）。</p>

        <h3 id="引入线程机制后，有什么变化？">
          <a href="#引入线程机制后，有什么变化？" class="heading-link"><i class="fas fa-link"></i></a>引入线程机制后，有什么变化？</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200516170547587.png" alt></p>

        <h3 id="线程的属性">
          <a href="#线程的属性" class="heading-link"><i class="fas fa-link"></i></a>线程的属性</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200516170831037.png" alt></p>

        <h3 id="线程的实现方式">
          <a href="#线程的实现方式" class="heading-link"><i class="fas fa-link"></i></a>线程的实现方式</h3>
      
        <h4 id="用户级线程（ULT）">
          <a href="#用户级线程（ULT）" class="heading-link"><i class="fas fa-link"></i></a>用户级线程（ULT）</h4>
      <p>用户级线程由应用程序通过线程库实现。所有的线程管理工作都由应用程序负责（包括线程切换）</p>
<p>用户级线程中，线程切换可以在用户态下即可完成，无需操作系统干预。</p>
<p>在用户看来，是有多个线程。但是操作系统内核看来，并意识不到线程的存在。（用户级线程对用户不透明，对操作系统透明）</p>
<p>可以这样理解，“用户级线程”就是“从用户视角看能看到的线程”</p>

        <h4 id="内核级线程（KLT-又称为“内核支持的线程”）">
          <a href="#内核级线程（KLT-又称为“内核支持的线程”）" class="heading-link"><i class="fas fa-link"></i></a>内核级线程（KLT 又称为“内核支持的线程”）</h4>
      <p>内核级线程的管理工作由操作系统内核完成。线程调度、切换等工作都由内核负责，因此，内核级线程的切换必须在核心态下才能完成。</p>
<p>可以这样理解，“内核级线程”就是“从操作系统内核视角看能看到的线程”</p>
<p>在同时支持用户级线程个内核级线程的系统中,可采用两者组合的方式：将n个用户级线程映射到m个内核级线程上（n&gt;=m）</p>
<ul>
<li>注意：操作系统只能“看得见”内核级线程，因此只有内核级线程才是处理机分配的单位。</li>
</ul>

        <h3 id="多线程模型">
          <a href="#多线程模型" class="heading-link"><i class="fas fa-link"></i></a>多线程模型</h3>
      <p>在同时支持用户级线程个内核级线程的系统中，由几个用户级线程映射到几个内核级线程的问题引出了“多线程模型”问题。</p>
<ol>
<li><p>多对一模型：多个用户及线程映射到一个内核级线程。每个用户进程只对应一个内核级线程。</p>
<ul>
<li>优点：用户级线程的切换在用户空间即可完成，不需要切换到核心态，线程管理的系统开销小，效率高。</li>
<li>缺点：当一个用户级程序被阻塞后，整个进程都会被阻塞，并发度不高。多个线程不可在多核处理机上并发执行。</li>
</ul>
</li>
<li><p>一对一模型：一个用户级线程映射到一个内核级线程。每个用户进程有于用户级线程同数量的内核级线程。</p>
<ul>
<li>优点：当一个线程被阻塞后，别的线程还可以继续执行，并发能力强。多线程可在多核处理机上并行执行。</li>
<li>缺点：一个用户进程会占用多个内核级线程，线程切换由操作系统内核完成，需要切换到核心态，因此线程管理的成本高、开销大。</li>
</ul>
</li>
<li><p>多对多模型：n用户级线程映射到m个内核级线程（n&gt;m）。每个用户进程对应m个内核级线程。</p>
<ul>
<li>克服了多对一模型并发度不高的缺点，有克服了一对一模型中一个用户进程占用太多内核级线程，开销太大的缺点。</li>
</ul>
</li>
</ol>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200516180213168.png" alt></p>

        <h2 id="处理机调度的概念、层次">
          <a href="#处理机调度的概念、层次" class="heading-link"><i class="fas fa-link"></i></a>处理机调度的概念、层次</h2>
      
        <h3 id="调度的基本概念">
          <a href="#调度的基本概念" class="heading-link"><i class="fas fa-link"></i></a>调度的基本概念</h3>
      <p>当有一堆任务要处理，但由于资源有限，这些事情没法同时处理，这就需要某种规则来决定处理这些任务的顺序，这就是“调度”研究的问题。</p>
<p>在多道程序系统中，进程的数量往往时多余处理机的个数的，这样不可能同时并行地处理各个进程。</p>
<ul>
<li>处理机调度，就是从就绪队列中按照一定的算法选择一个进程并将处理机分配给它运行，以实现进程的并发执行。</li>
</ul>

        <h3 id="调度的三个层次——高级调度">
          <a href="#调度的三个层次——高级调度" class="heading-link"><i class="fas fa-link"></i></a>调度的三个层次——高级调度</h3>
      <p>由于内存空间有限，有时无法将用户提交的作业全部放入内存，因此就需要确定某种规则来决定将作业调入内存的顺序。</p>
<p>高级调度（作业调度）。按一定的原则从外存上处于后备队列的作业中挑选一个（或多个）作业，给他们分配内存等必要资源，并建立相应的进程（建立PCB），以使它（们）获得竞争处理机的权利。</p>
<p>高级调度是辅存(外存)与内存之间的调度。每个作业只调入一次，调出一次。作业调入时会建立相应的PCB，作业调出时才撤销PCB。高级调度主要是指调入的问题，因为只有调入的时机需要操作系统来确定，但调出的时机必然是作业运行结束才调出。</p>

        <h3 id="调度的三个层次——中级调度">
          <a href="#调度的三个层次——中级调度" class="heading-link"><i class="fas fa-link"></i></a>调度的三个层次——中级调度</h3>
      <p>引入了虚拟存储技术之后，可将暂时不能运行的进程调至外存等待。等它重新具备了运行条件且内存又稍有空闲时，再重新调入内存。这么做的目的是为了提高内存利用率和系统吞吐量。暂时调到外存等待的进程状态为挂起状态。值得注意的是，PCB并不会一起调到外存，而是会常驻内存。PCB中会记录进程数据在外存中的存放位置，进程状态等信息，操作系统通过内存中的PCB ,来保持对各个进程的监控、管理。被挂起的进程PCB会被放到的挂起队列中。</p>
<ul>
<li>中级调度(内存调度)，就是要决定将哪个处于挂起状态的进程重新调入内存。一个进程可能会被多次调出、调入内存，因此中级调度发生的频率要比高级调度更高。</li>
</ul>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200517225847859.png" alt></p>

        <h3 id="调度的三个层次——低级调度">
          <a href="#调度的三个层次——低级调度" class="heading-link"><i class="fas fa-link"></i></a>调度的三个层次——低级调度</h3>
      <p>低级调度(进程调度)，其主要任务是按照某种方法和策略从就绪队列中选取一一个进程，将处理机分配给它。</p>
<p>进程调度是操作系统中最基本的一种调度，在–般的操作系统中都必须配置进程调度。进程调度的频率很高，一般几十毫秒一次。</p>

        <h3 id="三层调度的联系、对比">
          <a href="#三层调度的联系、对比" class="heading-link"><i class="fas fa-link"></i></a>三层调度的联系、对比</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200517230221985.png" alt></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200517230306141.png" alt></p>

        <h2 id="进程调度相关知识">
          <a href="#进程调度相关知识" class="heading-link"><i class="fas fa-link"></i></a>进程调度相关知识</h2>
      
        <h3 id="时机">
          <a href="#时机" class="heading-link"><i class="fas fa-link"></i></a>时机</h3>
      <ul>
<li>进程调度（低级调度），就是按照某种算法从就绪队列中选择一个进程为其分配处理机。</li>
</ul>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200517231056332.png" alt></p>
<p>进程在操作系统内核程序临界区中不能进行调度与切换，但是在普通临界区中是可以进行调度、切换的。</p>
<p>临界资源:一个时间段内只允许–个进程使用的资源。各进程需要互斥地访问临界资源。</p>
<p>临界区:访问临界资源的那段代码。</p>
<p>内核程序临界区：一般是用来访问某种内核数据结构的，比如进程的就绪队列(由各就绪进程的PCB组成)</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200517231716813.png" alt></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200517231822643.png" alt></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200517231912708.png" alt></p>

        <h3 id="方式">
          <a href="#方式" class="heading-link"><i class="fas fa-link"></i></a>方式</h3>
      <ol>
<li><p>非剥夺调度方式：又称非抢占方式。即，只允许进程主动放弃处理机。在运行过程中即便有更紧迫的任务到达，当前进程依然会继续使用处理机，直到该进程终止或主动要求进入阻塞态。</p>
<ul>
<li>实现简单，系统开销小但是无法及时处理紧急任务，适合于早期的批处理系统</li>
</ul>
</li>
<li><p>剥夺调度方式，又称抢占方式。当一个进程正在处理机上执行时，如果有-一个更重要或更紧迫的进程需要使用处理机，则立即暂停正在执行的进程，将处理机分配给更重要紧迫的那个进程。</p>
<ul>
<li>可以优先处理更紧急的进程，也可实现让各进程按时间片轮流执行的功能(通过时钟中断)。适合于分时操作系统、实时操作系统。</li>
</ul>
</li>
</ol>

        <h3 id="进程的切换与过程">
          <a href="#进程的切换与过程" class="heading-link"><i class="fas fa-link"></i></a>进程的切换与过程</h3>
      <p>“狭义的进程调度”与“进程切换”的区别:</p>
<p>狭义的进程调度指的是从就绪队列中选中-一个要运行的进程。(这个进程可以是刚刚被暂停执行的进程，也可能是另一个进程，后- -种情况就需要进程切换)</p>
<p>进程切换是指一个进程让出处理机，由另一个进程占用处理机的过程。</p>
<p>广义的进程调度包含了选择一个进程和进程切换两个步骤。</p>
<p>进程切换的过程主要完成了:</p>
<ol>
<li><p>对原来运行进程各种数据的保存</p>
</li>
<li><p>对新的进程各种数据的恢复</p>
</li>
</ol>
<ul>
<li>(如:程序计数器、程序状态字、各种数据寄存器等处理机现场信息，这些信息一般保存在进程控制块)</li>
</ul>
<p>注意:进程切换是有代价的，因此如果过于频繁的进行进程调度、切换，必然会使整个系统的效率降低,使系统大部分时间都花在了进程切换上，而真正用于执行进程的时间减少。</p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200517234510814.png" alt></p>

        <h2 id="调度算法的评价标准">
          <a href="#调度算法的评价标准" class="heading-link"><i class="fas fa-link"></i></a>调度算法的评价标准</h2>
      
        <h3 id="CPU利用率">
          <a href="#CPU利用率" class="heading-link"><i class="fas fa-link"></i></a>CPU利用率</h3>
      <p>由于早期的CPU造价极其昂贵，因此人们会希望让CPU尽可能多地工作。</p>
<p>CPU利用率:指CPU“忙碌”的时间占总时间的比例。</p>
<p>CPU利用率=忙碌的时间/总时间</p>

        <h3 id="系统吞吐量">
          <a href="#系统吞吐量" class="heading-link"><i class="fas fa-link"></i></a>系统吞吐量</h3>
      <p>对于计算机来说，希望能用尽可能少的时间处理完尽可能多的作业</p>
<p>系统吞吐量:单位时间内完成作业的数量</p>
<ul>
<li>系统吞吐量=总共完成了多少道作业/总共花了多少时间</li>
</ul>

        <h3 id="周转时间">
          <a href="#周转时间" class="heading-link"><i class="fas fa-link"></i></a>周转时间</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/8C1846EB71BA8DA9C8656AD416A2CE3F.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/46F79148A6D11CC6F68F3BE58DD0340D-1590483503713.png" alt="img"></p>

        <h3 id="等待时间">
          <a href="#等待时间" class="heading-link"><i class="fas fa-link"></i></a>等待时间</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/0B09767E71B794C4503919B015EC529F.png" alt="img"></p>

        <h3 id="响应时间">
          <a href="#响应时间" class="heading-link"><i class="fas fa-link"></i></a>响应时间</h3>
      <ul>
<li>对于计算机用户来说，会希望自己的提交的请求(比如通过键盘输入了一个调试命令)尽早地开始被系统服务、回应。</li>
<li>响应时间，指从用户提交请求到首次产生响应所用的时间。</li>
</ul>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/3615AD1E3D4DD93C533C683193133552.png" alt="img"></p>

        <h2 id="FCFS、SJF、HRRN调度算法">
          <a href="#FCFS、SJF、HRRN调度算法" class="heading-link"><i class="fas fa-link"></i></a>FCFS、SJF、HRRN调度算法</h2>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/370B2AB7FBF1B32B7580D5F963D0981A.png" alt="img"></p>

        <h3 id="先来先服务FCFS">
          <a href="#先来先服务FCFS" class="heading-link"><i class="fas fa-link"></i></a>先来先服务FCFS</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/E226208548C0413CA201614F75AC8E84.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/301F101DC70B204981CD0BAB822A3025.png" alt="img"></p>

        <h3 id="短作业优先SJF">
          <a href="#短作业优先SJF" class="heading-link"><i class="fas fa-link"></i></a>短作业优先SJF</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/3284440055E7DCA8E91D400F19E38D43.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/F650AA1DB1DA2C24184D39B4DEE792F9.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/2499B1580277DDD3CBD01021DD658794.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/D603774C9F88FEEEAE64CE5768551154.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/40179E6C3660743E1C3BA337A923FF62.png" alt="img"></p>

        <h3 id="高相应比优先">
          <a href="#高相应比优先" class="heading-link"><i class="fas fa-link"></i></a>高相应比优先</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/FBF31DF073307E4E40ED5D63585B6F58.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/6BBA45B6A44102BAAEB1D35B8418ACAC.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/B705B235FFE855D14850247F710B83BC.png" alt="img"></p>

        <h2 id="时间片轮转、优先级、多级反馈队列">
          <a href="#时间片轮转、优先级、多级反馈队列" class="heading-link"><i class="fas fa-link"></i></a>时间片轮转、优先级、多级反馈队列</h2>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/C8947EE548714835B7C835DC8A1046F9.png" alt="img"></p>

        <h3 id="时间片轮转调度算法RR">
          <a href="#时间片轮转调度算法RR" class="heading-link"><i class="fas fa-link"></i></a>时间片轮转调度算法RR</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/EFCBBDB2A01CFD0A70849476FC1FC20A.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/23E48A470DB709B8E2DD32863CFCC35A.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/24FCD420525091AF9163EE068FB9479B.png" alt="img"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522164845801.png" alt="RR时间片轮转"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522165007615.png" alt></p>

        <h3 id="优先级调度算法">
          <a href="#优先级调度算法" class="heading-link"><i class="fas fa-link"></i></a>优先级调度算法</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522165944841.png" alt="image-20200522165944841"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522170641334.png" alt="image-20200522170641334"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522171024736.png" alt="image-20200522171024736"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522171120973.png" alt="image-20200522171120973"></p>

        <h3 id="多级反馈队列调度算法">
          <a href="#多级反馈队列调度算法" class="heading-link"><i class="fas fa-link"></i></a>多级反馈队列调度算法</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522171804658.png" alt="多级反馈队列调度算法"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522172026837.png" alt="image-20200522172026837"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522172303794.png" alt="image-20200522172303794"></p>

        <h2 id="进程同步与进程互斥">
          <a href="#进程同步与进程互斥" class="heading-link"><i class="fas fa-link"></i></a>进程同步与进程互斥</h2>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522172900860.png" alt="image-20200522172900860"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522173038616.png" alt="image-20200522173038616"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522173216436.png" alt="image-20200522173216436"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522173230260.png" alt="image-20200522173230260"></p>

        <h2 id="进程互斥的软件实现方法">
          <a href="#进程互斥的软件实现方法" class="heading-link"><i class="fas fa-link"></i></a>进程互斥的软件实现方法</h2>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522173425200.png" alt="image-20200522173425200"></p>

        <h3 id="单标志法">
          <a href="#单标志法" class="heading-link"><i class="fas fa-link"></i></a>单标志法</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522173744354.png" alt="单标志法"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522173914634.png" alt="局限性"></p>

        <h3 id="双标志先检查法">
          <a href="#双标志先检查法" class="heading-link"><i class="fas fa-link"></i></a>双标志先检查法</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522174701927.png" alt="双标志先检查法"></p>

        <h3 id="双标志后检查法">
          <a href="#双标志后检查法" class="heading-link"><i class="fas fa-link"></i></a>双标志后检查法</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522174915734.png" alt="双标志后检查法"></p>

        <h3 id="Peterson算法">
          <a href="#Peterson算法" class="heading-link"><i class="fas fa-link"></i></a>Peterson算法</h3>
      <p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522202550329.png" alt="image-20200522202550329"></p>
<p><img src="/2020/05/26/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20200522203438406.png" alt="image-20200522203438406"></p>
]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统第一章</title>
    <url>/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>关于操作系统的一些基本概念</p>
<a id="more"></a>


        <h2 id="操作系统的概念、功能和目标">
          <a href="#操作系统的概念、功能和目标" class="heading-link"><i class="fas fa-link"></i></a>操作系统的概念、功能和目标</h2>
      
        <h3 id="概念">
          <a href="#概念" class="heading-link"><i class="fas fa-link"></i></a>概念</h3>
      <p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/gainian.png" alt="gainian"></p>
<p>补充：进程是一个程序的执行过程，执行前需要将该程序放在内存中，才能被CPU处理。</p>

        <h3 id="功能和目标">
          <a href="#功能和目标" class="heading-link"><i class="fas fa-link"></i></a>功能和目标</h3>
      <ul>
<li><p>作为系统资源的管理者</p>
<ol>
<li><p>功能 ：1、处理机管理2、存储器管理3、文件管理4、设备管理</p>
</li>
<li><p>目标：安全、高效</p>
</li>
</ol>
</li>
<li><p>作为用户和计算机硬件之间的接口</p>
<ol>
<li><p>功能：1、命令接口（联机命令接口、脱机命令接口）2、程序接口——由一组系统调用组成3、GUI（即图形用户界面）            </p>
</li>
<li><p>目标：方便用户使用</p>
<ul>
<li>命令接口：允许用户直接使用</li>
<li>程序接口：允许用户通过程序简介使用=系统调用=广义指令</li>
<li>GUI：现代操作系统中最流行的图形用户接口</li>
</ul>
</li>
</ol>
</li>
</ul>
<ul>
<li>作为最接近硬件的层次——实现对硬件机器的拓展。</li>
</ul>

        <h2 id="四个特征">
          <a href="#四个特征" class="heading-link"><i class="fas fa-link"></i></a>四个特征</h2>
      <ul>
<li><p>操作系统的特征：并发、共享、虚拟、异步。并发和共享是两个最基本的特征，互为存在条件。</p>
<ol>
<li><p>并发：指两个或多个事件在同一时间间隔发生。这些事件宏观上是同时发生的，但微观上是交替发生的。（并行：指两个或多个事件在同一时刻同时发生。）</p>
</li>
<li><p>共享：即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。</p>
<ul>
<li>两种资源共享方式：1、互斥共享方式——一个时间段内只允许一个进程访问该资源。2、同时共享方式——允许一个时间段内有多个进程“同时”对他们进行访问。</li>
</ul>
</li>
<li><p>虚拟：是指把一个物理上的实体变为若干个逻辑上的对应物，物理实体（前者）是实际存在的，而逻辑上的对应物（后者）是用户感受到的。</p>
<ul>
<li><p>虚拟技术：1、空分复用技术（如虚拟存储器技术）。2、时分复用技术（如虚拟处理器）。</p>
</li>
<li><p>没有并发性，就无虚拟性。</p>
</li>
</ul>
</li>
<li><p>异步：在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，以不可预知的速度向前推进。</p>
<ul>
<li>只有系统拥有并发性，才有可能导致异步。</li>
</ul>
</li>
</ol>
</li>
</ul>

        <h2 id="OS的发展与分类">
          <a href="#OS的发展与分类" class="heading-link"><i class="fas fa-link"></i></a>OS的发展与分类</h2>
      <p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%8F%91%E5%B1%95%E4%B8%8E%E5%88%86%E7%B1%BB.png" alt="发展与分类"></p>
<ol>
<li><p>手工操作阶段</p>
<ul>
<li>主要缺点：用户独占全机，人机速度矛盾导致资源利用率极低。</li>
</ul>
</li>
<li><p>批处理阶段——单道批处理系统</p>
<ul>
<li>引入脱机输入/输出技术（用磁带完成），并监督程序（操作系统的雏形）负责控制作业的输入、输出。</li>
<li>主要优点：缓解了一定程度的人机速度矛盾，资源利用率有所提升。</li>
<li>主要缺点：内存中仅能有一道程序运行，只有该程序运行结束之后才能调入下一道程序。CPU有大量的时间是在空闲等待I/O完成。资源利用率仍然很低。</li>
</ul>
</li>
<li><p>批处理阶段——多道批处理系统</p>
<ul>
<li>主要优点：多道程序并发执行，共享计算机资源。资源利用率大幅提升，CPU和其他资源保持”忙碌”状态，系统吞吐量增大。</li>
<li>主要缺点：用户响应时间长，没有人机交互功能（用户提交自己的作业之后就只能等待计算机处理完成，之间不能控制自己的作业执行）。</li>
</ul>
</li>
<li><p>分时操作系统</p>
<ul>
<li>计算机以时间片为单位轮流为各个用户/作业服务，各个用户可通过终端与计算机进行交互。</li>
<li>主要优点：用户请求可以被及时响应，解决了人机交互问题。允许多个用户同时使用一台计算机，并且用户对计算机的操作相互对立，感受不到别人的存在。</li>
<li>主要缺点：不能优先处理一些紧急任务。操作系统对各个用户/作业都是完全公平的，循环地为每个用户/作业服务一个时间片，不区分任务的紧急性。</li>
</ul>
</li>
<li><p>实时操作系统</p>
<ul>
<li>主要优点：能够优先响应一写紧急任务，某些紧急任务不需时间片排队。</li>
<li>在实时系统的控制下，计算机系统接收到外部信号后及时进行处理，并且要在严格的时限内处理完事件。实时操作系统的主要特点是及时性和可靠性。</li>
<li>实时操作系统分为：1、硬实时系统——必须在绝对严格的规定时间内完成处理（如：导弹控制系统、自动驾驶系统）。2、软实时系统——能接受偶尔违反时间规定（如：12306火车订票系统）。</li>
</ul>
</li>
</ol>
<p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200510170945474.png" alt></p>

        <h2 id="运行机制与体系结构">
          <a href="#运行机制与体系结构" class="heading-link"><i class="fas fa-link"></i></a>运行机制与体系结构</h2>
      <p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200510172130465.png" alt></p>

        <h3 id="运行机制">
          <a href="#运行机制" class="heading-link"><i class="fas fa-link"></i></a>运行机制</h3>
      <ul>
<li>两种指令：1、特权指令：如内存清零指令（不允许用户程序使用。）2、非特权指令：如普通的运算指令。</li>
<li>两种处理器状态（用程序状态字寄存器（PSW）中的某标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态)：1、用户态（目态）——此时CPU只执行非特权指令。2、核心态（管态）——特权指令、非特权指令都可以执行。</li>
<li>两种程序：1、内核程序——是系统的管理者，既可以执行特权指令，也可以执行非特权指令，运行在核心态。2、应用程序——为了保证系统能安全运行，普通应用程序只能执行非特权指令，运行在用户态。</li>
</ul>

        <h3 id="操作系统的内核">
          <a href="#操作系统的内核" class="heading-link"><i class="fas fa-link"></i></a>操作系统的内核</h3>
      <p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200510174105987.png" alt></p>
<p>内核是计算机上配置的底层软件，是操作系统最基本、最核心的部分。实现操作系统内核功能的那些程序就是内核程序。</p>
<p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200510175832130.png" alt></p>

        <h3 id="操作系统的体系结构">
          <a href="#操作系统的体系结构" class="heading-link"><i class="fas fa-link"></i></a>操作系统的体系结构</h3>
      <p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200510180417551.png" alt></p>

        <h2 id="中断和异常">
          <a href="#中断和异常" class="heading-link"><i class="fas fa-link"></i></a>中断和异常</h2>
      
        <h3 id="中断机制的诞生">
          <a href="#中断机制的诞生" class="heading-link"><i class="fas fa-link"></i></a>中断机制的诞生</h3>
      <p>本质：发生中断就意味着需要操作系统介入，开展管理工作。 </p>
<p>为了实现多道程序并发执行而引入的一种技术。</p>

        <h3 id="中断的概念和作用">
          <a href="#中断的概念和作用" class="heading-link"><i class="fas fa-link"></i></a>中断的概念和作用</h3>
      <ol>
<li>当中断发生时，CPU立即进入核心态。</li>
<li>当中断发生后，当前运行的进程短暂运行，并由操作系统内核对中断进行处理。</li>
<li>对于不同的中断信号，会进行不同的处理。</li>
</ol>
<ul>
<li>“用户态—&gt;核心态”是通过中断实现的。并且中断是唯一途径。“核心态—&gt;用户态”的切换是通过执行一个特权指令，将程序状态字（PSW）的标志位设置为“用户态”。</li>
</ul>

        <h3 id="中断的分类">
          <a href="#中断的分类" class="heading-link"><i class="fas fa-link"></i></a>中断的分类</h3>
      <ol>
<li>内中断（也称异常、例外、陷入）：1、自愿中断——指令中断（如：系统调用时使用的访管指令（又叫陷入指令、trap指令））。2、强迫中断——硬件故障（如：缺页）、软件故障（如：整数除0）。<ul>
<li>信号的来源：CPU内部，与当前执行的指令有关。</li>
</ul>
</li>
<li>外中断（中断）：1、外设请求（如：I/O操作完成发出的中断信号）。2、人工干预（如：用户强行终止一个进程）。<ul>
<li>信号的来源：CPU外部，与当前执行的指令无关。</li>
</ul>
</li>
</ol>
<p>另一种分类：</p>
<ol>
<li>内中断（内部异常）：1、陷阱、陷入（trap）——有意而为之的异常，如系统调用。2、故障（fault）——由错误条件引起的，可能被故障处理程序修复，如缺页。3、终止（abort）——不可修复的致命错误造成的结果，终止处理程序不再将控制返回给引发终止的应用程序，如整数除0.<ul>
<li>信号的来源：CPU内部，与当前执行的指令有关。</li>
</ul>
</li>
<li>外中断（中断）：1、I/O中断请求。2、人工干预。<ul>
<li>信号的来源：CPU外部，与当前执行的指令无关。</li>
</ul>
</li>
</ol>

        <h3 id="外中断的处理过程">
          <a href="#外中断的处理过程" class="heading-link"><i class="fas fa-link"></i></a>外中断的处理过程</h3>
      <ol>
<li>执行完每个指令之后，CPU都要检查当前是否有外部中断信号。</li>
<li>如果检测到外部中断信号，则需要保护被中断进程的CPU环境（如程序状态字PSW、程序计数器PC、各种通用寄存器）。</li>
<li>根据中断信号类型转入相应的中断处理程序。</li>
<li>回复原进程的CPU环境并退出中断，返回原进程继续往下执行。</li>
</ol>
<p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8.png" alt></p>

        <h2 id="系统调用">
          <a href="#系统调用" class="heading-link"><i class="fas fa-link"></i></a>系统调用</h2>
      
        <h3 id="什么是系统调用，有何作用">
          <a href="#什么是系统调用，有何作用" class="heading-link"><i class="fas fa-link"></i></a>什么是系统调用，有何作用</h3>
      <ul>
<li><p>概念：“系统调用”是操作系统提供给应用程序（程序员/编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。</p>
</li>
<li><p>作用：应用程序通过系统调用请求操作系统的服务。系统中的各种共享资源都由操作系统统一掌管，因此在用户程序中，愤怒时与资源有关的操作（如存储分配、I/O操作、文件管理等），都必须通过系统调用的方式向操作系统提出服务请求，由操作系统代为完成。这样可以保证系统的稳定性和安全性，防止用户进行非法操作。</p>
</li>
<li><p>系统调用（按功能分类）：1、设备管理——完成设备的请求/释放/启动等功能。2、文件管理——完成文件的读/写/创建/删除等功能。3、进程控制——完成进程的创建/撤销/阻塞/唤醒等功能。4、进程通信——完成进程之间的消息传递/信号传递等功能。5、内存管理——完成内存的分配/回收等功能。</p>
<ul>
<li>系统调用相关处理涉及到对系统资源的管理、对进程的控制，这些功能需要一些特权指令才能完成，因此系统调用的相关处理需要在核心态下进行。</li>
</ul>
</li>
</ul>

        <h3 id="系统调用与库函数的区别">
          <a href="#系统调用与库函数的区别" class="heading-link"><i class="fas fa-link"></i></a>系统调用与库函数的区别</h3>
      <p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200513181703297.png" alt></p>

        <h3 id="系统调用背后的过程">
          <a href="#系统调用背后的过程" class="heading-link"><i class="fas fa-link"></i></a>系统调用背后的过程</h3>
      <p>传递系统调用参数—&gt;执行陷入指令（用户态）—&gt;执行系统调用相应服务程序（核心态）—&gt;返回应用程序</p>
<p>注意：1、陷入指令是在用户态执行的，执行陷入指令之后立即引发一个内中断，从而CPU进入核心态。</p>
<p>2、发出系统调用请求是在用户态，而对系统调用的相应处理在核心态下进行。</p>
<p>3、陷入指令是指唯一一个只能在用户态执行，而不可在核心态执行的指令。</p>
<p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200513222640906.png" alt></p>
<p><img src="/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200522203546622.png" alt="image-20200522203546622"></p>
]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>IP基础知识</title>
    <url>/2020/05/11/IP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p><span class="exturl"><a class="exturl__link" href="https://mp.weixin.qq.com/s/qydIO7NDfFTYs4-ZZlfgRg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/qydIO7NDfFTYs4-ZZlfgRg</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>这是我在微信公众号上看到的一篇文章。</p>
]]></content>
  </entry>
  <entry>
    <title>30种常见颜色代码</title>
    <url>/2020/05/09/30%E7%A7%8D%E5%B8%B8%E8%A7%81%E9%A2%9C%E8%89%B2%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>参考资料：<span class="exturl"><a class="exturl__link" href="http://baike.baidu.com/l/XFkkrKXW?bk_share=copy" target="_blank" rel="noopener">百度百科-颜色码</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<a id="more"></a>

<p>浅粉色  #FFB6C1</p>
<p>粉红 FFC0CB</p>
<p>猩红 #DC143C</p>
<p>脸红的淡紫色  #FFF0F5</p>
<p>苍白的紫罗兰红色#DB7093</p>
<p>热情的粉红  #FF69B4</p>
<p>深粉色  #FF1493</p>
<p>适中的紫罗兰红色  #C71585</p>
<p>兰花的紫色  #DA70D6</p>
<p>蓟  #D8BFD8</p>
<p>李子   #DDA0DD</p>
<p>紫罗兰  #EE82EE</p>
<p>洋红  #FF00FF</p>
<p>灯笼海棠（紫红）#FF00FF</p>
<p>深洋红色  #8B008B</p>
<p>紫色  #800080</p>
<p>适中的兰花紫  #BA55D3</p>
<p>深<span class="exturl"><a class="exturl__link" href="https://www.baidu.com/s?wd=紫罗兰色&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">紫罗兰色</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>   #9400D3</p>
<p>深兰花紫  #9932CC</p>
<p>靛青   #4B0082</p>
<p>深紫罗兰的蓝色  #8A2BE2</p>
<p>适中的紫色   #9370DB</p>
<p>暗蓝灰色  #7B68EE</p>
<p>板岩暗蓝灰色  #6A5ACD</p>
<p>深岩暗蓝灰色  #483D8B</p>
<p>薰衣草花的淡紫色  #E6E6FA</p>
<p>幽灵的白色    #F8F8FF</p>
<p>纯蓝   #0000FF</p>
<p>适中的蓝色   #0000CD</p>
<p>午夜的蓝色   #191970</p>
<p>深蓝色    #00008B</p>
<p>海军蓝    #000080</p>
<p>宝蓝    #4169E1</p>
<p>矢车菊的蓝色   #6495ED</p>
<p>淡钢蓝           #B0C4DE</p>
<p>爱丽丝蓝         #F0F8FF</p>
<p>钢蓝             #4682B4</p>
<p>淡蓝色           #87CEFA</p>
<p>天蓝色           #87CEEB</p>
]]></content>
      <tags>
        <tag>颜色代码</tag>
      </tags>
  </entry>
  <entry>
    <title>接口和抽象类的区别是什么？</title>
    <url>/2020/05/06/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<p>接口和抽象类的区别是什么？</p>
<ol>
<li>接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。</li>
<li>接口中除了 static、final 变量，不能有其他变量，而抽象类中则不一定。</li>
<li>一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过 extends 关键字扩展多个接口。</li>
<li>接口方法默认修饰符是 public，抽象方法可以有 public、protected 和 default 这些修饰符（抽象方法就是为了被重写所以不能使用 private 关键字修饰！）。</li>
<li>从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。</li>
</ol>
<blockquote>
<p>备注：</p>
<ol>
<li>在 JDK8 中，接口也可以定义静态方法，可以直接用接口名调用。实现类和实现是不可以调用的。如果同时实现两个接口，接口中定义了一样的默认方法，则必须重写，不然会报错。(详见 issue:<span class="exturl"><a class="exturl__link" href="https://github.com/Snailclimb/JavaGuide/issues/146。" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide/issues/146。</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>jdk9 的接口被允许定义私有方法 。</li>
</ol>
</blockquote>
<p>总结一下 jdk7~jdk9 Java 中接口概念的变化（<span class="exturl"><a class="exturl__link" href="https://www.geeksforgeeks.org/private-methods-java-9-interfaces/" target="_blank" rel="noopener">相关阅读</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>）：</p>
<ol>
<li>在 jdk 7 或更早版本中，接口里面只能有常量变量和抽象方法。这些接口方法必须由选择实现接口的类实现。</li>
<li>jdk8 的时候接口可以有默认方法和静态方法功能。</li>
<li>Jdk 9 在接口中引入了私有方法和私有静态方法。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hexo-常用命令</title>
    <url>/2020/05/06/Hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>（1）<code>$ hexo g</code>或<code>$ hexo generate</code></strong><br> 该命令执行后在<code>hexo</code>站点根目录下生成<code>public</code>文件夹</p>
<p><strong>（2）<code>$ hexo clean</code></strong><br> 把（1）中的<code>public</code>文件夹删除</p>
<p><strong>（3）<code>$ hexo s</code>或<code>$ hexo server</code></strong><br> 启动服务预览</p>
<p><strong>（4）<code>$ hexo d</code>或<code>$ hexo deploy</code></strong><br> 部署站点，在本地生成<code>.deploy_git</code>文件夹，并将编译后的文件上传至 GitHub。</p>
<p><strong>（5）<code>$ hexo new [layout]</code></strong><br> 例如：<code>$ hexo new photo “my-first-blog”</code><br> 上述指令执行时，Hexo 会尝试在 scaffolds 中寻找photo.md布局，若找到，则根据该布局新建文章；若未找到或指令中未指定该参数，则使用post.md新建文章。新建文章的名称在_config.yml中配置。</p>
<p><strong>（6）删除文章</strong><br> 只需在本地把<code>source/_posts</code>文件夹下的文章源文件删除后，执行以下命令重新部署即可。</p>
<figure class="highlight cpp"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo clean <span class="comment">// 一定要先 clean，防止灵异事件发生</span></span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></div></figure>

<p>作者：四喜汤圆<br>链接：<span class="exturl"><a class="exturl__link" href="https://www.jianshu.com/p/7ba00af8da13" target="_blank" rel="noopener">https://www.jianshu.com/p/7ba00af8da13</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>来源：简书</p>
]]></content>
  </entry>
  <entry>
    <title>重载和重写的区别</title>
    <url>/2020/05/06/%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理</p>
<p>重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法</p>
<div class="table-container"><table>
<thead>
<tr>
<th>区别点</th>
<th>重载方法</th>
<th>重写方法</th>
</tr>
</thead>
<tbody><tr>
<td>发生范围</td>
<td>同一个类</td>
<td>子类 中</td>
</tr>
<tr>
<td>参数列表</td>
<td>必须修改</td>
<td>一定不能修改</td>
</tr>
<tr>
<td>返回类型</td>
<td>可修改</td>
<td>一定不能修改</td>
</tr>
<tr>
<td>异常</td>
<td>可修改</td>
<td>可以减少或删除，一定不能抛出新的或者更广的异常</td>
</tr>
<tr>
<td>访问修饰符</td>
<td>可修改</td>
<td>一定不能做更严格的限制（可以降低限制）</td>
</tr>
<tr>
<td>发生阶段</td>
<td>编译期</td>
<td>运行期</td>
</tr>
</tbody></table></div>
]]></content>
  </entry>
  <entry>
    <title>Java和C++的区别</title>
    <url>/2020/05/06/Java%E5%92%8CC++%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<ul>
<li>都是面向对象的语言，都支持封装、继承和多态</li>
<li>Java 不提供指针来直接访问内存，程序内存更加安全</li>
<li>Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。</li>
<li>Java 有自动内存管理机制，不需要程序员手动释放无用内存</li>
<li><strong>在 C 语言中，字符串或字符数组最后都会有一个额外的字符‘\0’来表示结束。但是，Java 语言中没有结束符这一概念。</strong></li>
</ul>
]]></content>
  </entry>
</search>
