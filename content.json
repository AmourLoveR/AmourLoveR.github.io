{"meta":{"title":"Amour&R'blog","subtitle":"","description":"","author":"Amour&R","url":"http://yoursite.com","root":"/"},"pages":[{"title":"友情链接","date":"2020-05-09T11:47:11.997Z","updated":"2020-05-09T11:47:11.997Z","comments":true,"path":"friends/index.html","permalink":"http://yoursite.com/friends/index.html","excerpt":"","text":""}],"posts":[{"title":"操作系统","slug":"操作系统","date":"2020-05-09T14:28:40.000Z","updated":"2020-05-09T15:30:43.989Z","comments":true,"path":"2020/05/09/操作系统/","link":"","permalink":"http://yoursite.com/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","excerpt":"概念、功能和目标","text":"概念、功能和目标 概念 补充：进程是一个程序的执行过程，执行前需要将该程序放在内存中，才能被CPU处理。 功能和目标一.作为系统资源的管理者 ​ 功能 ：1、处理机管理 ​ 2、存储器管理 ​ 3、文件管理 ​ 4、设备管理 ​ 目标：安全、高效 二、作为用户和计算机硬件之间的接口 ​ 功能：1、命令接口（联机命令接口、脱机命令接口） ​ 2、程序接口——由一组系统调用组成 ​ 3、GUI（即图形用户界面） ​ 目标：方便用户使用 ​ 命令接口：允许用户直接使用 ​ 程序接口：允许用户通过程序简介使用=系统调用=广义指令 ​ GUI：现代操作系统中最流行的图形用户接口 三、作为最接近硬件的层次——实现对硬件机器的拓展。","categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"30种常见颜色代码","slug":"30种常见颜色代码","date":"2020-05-09T11:18:08.000Z","updated":"2020-05-09T11:28:25.180Z","comments":true,"path":"2020/05/09/30种常见颜色代码/","link":"","permalink":"http://yoursite.com/2020/05/09/30%E7%A7%8D%E5%B8%B8%E8%A7%81%E9%A2%9C%E8%89%B2%E4%BB%A3%E7%A0%81/","excerpt":"","text":"30种常见颜色代码浅粉色 #FFB6C1 粉红 FFC0CB 猩红 #DC143C 脸红的淡紫色 #FFF0F5 苍白的紫罗兰红色#DB7093 热情的粉红 #FF69B4 深粉色 #FF1493 适中的紫罗兰红色 #C71585 兰花的紫色 #DA70D6 蓟 #D8BFD8 李子 #DDA0DD 紫罗兰 #EE82EE 洋红 #FF00FF 灯笼海棠（紫红）#FF00FF 深洋红色 #8B008B 紫色 #800080 适中的兰花紫 #BA55D3 深紫罗兰色 #9400D3 深兰花紫 #9932CC 靛青 #4B0082 深紫罗兰的蓝色 #8A2BE2 适中的紫色 #9370DB 暗蓝灰色 #7B68EE 板岩暗蓝灰色 #6A5ACD 深岩暗蓝灰色 #483D8B 薰衣草花的淡紫色 #E6E6FA 幽灵的白色 #F8F8FF 纯蓝 #0000FF 适中的蓝色 #0000CD 午夜的蓝色 #191970 深蓝色 #00008B 海军蓝 #000080 宝蓝 #4169E1 矢车菊的蓝色 #6495ED 淡钢蓝 #B0C4DE 爱丽丝蓝 #F0F8FF 钢蓝 #4682B4 淡蓝色 #87CEFA 天蓝色 #87CEEB 参考资料：百度百科-颜色码","categories":[],"tags":[{"name":"颜色代码","slug":"颜色代码","permalink":"http://yoursite.com/tags/%E9%A2%9C%E8%89%B2%E4%BB%A3%E7%A0%81/"}]},{"title":"接口和抽象类的区别是什么？","slug":"接口和抽象类的区别是什么？","date":"2020-05-06T10:41:49.000Z","updated":"2020-05-06T10:44:39.272Z","comments":true,"path":"2020/05/06/接口和抽象类的区别是什么？/","link":"","permalink":"http://yoursite.com/2020/05/06/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/","excerpt":"","text":"接口和抽象类的区别是什么？ 接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。 接口中除了 static、final 变量，不能有其他变量，而抽象类中则不一定。 一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过 extends 关键字扩展多个接口。 接口方法默认修饰符是 public，抽象方法可以有 public、protected 和 default 这些修饰符（抽象方法就是为了被重写所以不能使用 private 关键字修饰！）。 从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。 备注： 在 JDK8 中，接口也可以定义静态方法，可以直接用接口名调用。实现类和实现是不可以调用的。如果同时实现两个接口，接口中定义了一样的默认方法，则必须重写，不然会报错。(详见 issue:https://github.com/Snailclimb/JavaGuide/issues/146。 jdk9 的接口被允许定义私有方法 。 总结一下 jdk7~jdk9 Java 中接口概念的变化（相关阅读）： 在 jdk 7 或更早版本中，接口里面只能有常量变量和抽象方法。这些接口方法必须由选择实现接口的类实现。 jdk8 的时候接口可以有默认方法和静态方法功能。 Jdk 9 在接口中引入了私有方法和私有静态方法。","categories":[],"tags":[]},{"title":"Hexo-常用命令","slug":"Hexo-常用命令","date":"2020-05-06T10:15:10.000Z","updated":"2020-05-06T10:21:23.719Z","comments":true,"path":"2020/05/06/Hexo-常用命令/","link":"","permalink":"http://yoursite.com/2020/05/06/Hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"（1）$ hexo g或$ hexo generate 该命令执行后在hexo站点根目录下生成public文件夹 （2）$ hexo clean 把（1）中的public文件夹删除 （3）$ hexo s或$ hexo server 启动服务预览 （4）$ hexo d或$ hexo deploy 部署站点，在本地生成.deploy_git文件夹，并将编译后的文件上传至 GitHub。 （5）$ hexo new [layout] 例如：$ hexo new photo “my-first-blog” 上述指令执行时，Hexo 会尝试在 scaffolds 中寻找photo.md布局，若找到，则根据该布局新建文章；若未找到或指令中未指定该参数，则使用post.md新建文章。新建文章的名称在_config.yml中配置。 （6）删除文章 只需在本地把source/_posts文件夹下的文章源文件删除后，执行以下命令重新部署即可。 12$ hexo clean // 一定要先 clean，防止灵异事件发生$ hexo s 作者：四喜汤圆链接：https://www.jianshu.com/p/7ba00af8da13来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","categories":[],"tags":[]},{"title":"重载和重写的区别","slug":"重载和重写的区别","date":"2020-05-06T09:29:39.000Z","updated":"2020-05-06T09:53:46.443Z","comments":true,"path":"2020/05/06/重载和重写的区别/","link":"","permalink":"http://yoursite.com/2020/05/06/%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理 重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法 区别点 重载方法 重写方法 发生范围 同一个类 子类 中 参数列表 必须修改 一定不能修改 返回类型 可修改 一定不能修改 异常 可修改 可以减少或删除，一定不能抛出新的或者更广的异常 访问修饰符 可修改 一定不能做更严格的限制（可以降低限制） 发生阶段 编译期 运行期","categories":[],"tags":[]},{"title":"Java和C++的区别","slug":"Java和C++的区别","date":"2020-05-06T08:51:36.000Z","updated":"2020-05-06T09:13:01.440Z","comments":true,"path":"2020/05/06/Java和C++的区别/","link":"","permalink":"http://yoursite.com/2020/05/06/Java%E5%92%8CC++%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"都是面向对象的语言，都支持封装、继承和多态 Java 不提供指针来直接访问内存，程序内存更加安全 Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。 Java 有自动内存管理机制，不需要程序员手动释放无用内存 在 C 语言中，字符串或字符数组最后都会有一个额外的字符‘\\0’来表示结束。但是，Java 语言中没有结束符这一概念。","categories":[],"tags":[]},{"title":"First","slug":"First","date":"2020-05-02T16:08:50.000Z","updated":"2020-05-02T16:16:16.161Z","comments":true,"path":"2020/05/03/First/","link":"","permalink":"http://yoursite.com/2020/05/03/First/","excerpt":"","text":"","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"颜色代码","slug":"颜色代码","permalink":"http://yoursite.com/tags/%E9%A2%9C%E8%89%B2%E4%BB%A3%E7%A0%81/"}]}