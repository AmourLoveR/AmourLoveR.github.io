{"meta":{"title":"Amour&R'blog","subtitle":"","description":"","author":"Amour&R","url":"http://amourlover.xyz","root":"/"},"pages":[{"title":"友情链接","date":"2020-05-09T11:47:11.997Z","updated":"2020-05-09T11:47:11.997Z","comments":true,"path":"friends/index.html","permalink":"http://amourlover.xyz/friends/index.html","excerpt":"","text":""}],"posts":[{"title":"IP基础知识","slug":"IP基础知识","date":"2020-05-11T13:56:21.000Z","updated":"2020-05-11T14:50:08.571Z","comments":true,"path":"2020/05/11/IP基础知识/","link":"","permalink":"http://amourlover.xyz/2020/05/11/IP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"","text":"https://mp.weixin.qq.com/s/qydIO7NDfFTYs4-ZZlfgRg 这是我在微信公众号上看到的一篇文章。","categories":[],"tags":[]},{"title":"操作系统","slug":"操作系统","date":"2020-05-09T14:28:40.000Z","updated":"2020-05-13T10:23:57.978Z","comments":true,"path":"2020/05/09/操作系统/","link":"","permalink":"http://amourlover.xyz/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","excerpt":"计算机操作系统","text":"计算机操作系统 概念 补充：进程是一个程序的执行过程，执行前需要将该程序放在内存中，才能被CPU处理。 功能和目标 作为系统资源的管理者 功能 ：1、处理机管理2、存储器管理3、文件管理4、设备管理 目标：安全、高效 作为用户和计算机硬件之间的接口 功能：1、命令接口（联机命令接口、脱机命令接口）2、程序接口——由一组系统调用组成3、GUI（即图形用户界面） 目标：方便用户使用 命令接口：允许用户直接使用 程序接口：允许用户通过程序简介使用=系统调用=广义指令 GUI：现代操作系统中最流行的图形用户接口 作为最接近硬件的层次——实现对硬件机器的拓展。 四个特征 操作系统的特征：并发、共享、虚拟、异步。并发和共享是两个最基本的特征，互为存在条件。 并发：指两个或多个事件在同一时间间隔发生。这些事件宏观上是同时发生的，但微观上是交替发生的。（并行：指两个或多个事件在同一时刻同时发生。） 共享：即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。 两种资源共享方式：1、互斥共享方式——一个时间段内只允许一个进程访问该资源。2、同时共享方式——允许一个时间段内有多个进程“同时”对他们进行访问。 虚拟：是指把一个物理上的实体变为若干个逻辑上的对应物，物理实体（前者）是实际存在的，而逻辑上的对应物（后者）是用户感受到的。 虚拟技术：1、空分复用技术（如虚拟存储器技术）。2、时分复用技术（如虚拟处理器）。 没有并发性，就无虚拟性。 异步：在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，以不可预知的速度向前推进。 只有系统拥有并发性，才有可能导致异步。 OS的发展与分类 手工操作阶段 主要缺点：用户独占全机，人机速度矛盾导致资源利用率极低。 批处理阶段——单道批处理系统 引入脱机输入/输出技术（用磁带完成），并监督程序（操作系统的雏形）负责控制作业的输入、输出。 主要优点：缓解了一定程度的人机速度矛盾，资源利用率有所提升。 主要缺点：内存中仅能有一道程序运行，只有该程序运行结束之后才能调入下一道程序。CPU有大量的时间是在空闲等待I/O完成。资源利用率仍然很低。 批处理阶段——多道批处理系统 主要优点：多道程序并发执行，共享计算机资源。资源利用率大幅提升，CPU和其他资源保持”忙碌”状态，系统吞吐量增大。 主要缺点：用户响应时间长，没有人机交互功能（用户提交自己的作业之后就只能等待计算机处理完成，之间不能控制自己的作业执行）。 分时操作系统 计算机以时间片为单位轮流为各个用户/作业服务，各个用户可通过终端与计算机进行交互。 主要优点：用户请求可以被及时响应，解决了人机交互问题。允许多个用户同时使用一台计算机，并且用户对计算机的操作相互对立，感受不到别人的存在。 主要缺点：不能优先处理一些紧急任务。操作系统对各个用户/作业都是完全公平的，循环地为每个用户/作业服务一个时间片，不区分任务的紧急性。 实时操作系统 主要优点：能够优先响应一写紧急任务，某些紧急任务不需时间片排队。 在实时系统的控制下，计算机系统接收到外部信号后及时进行处理，并且要在严格的时限内处理完事件。实时操作系统的主要特点是及时性和可靠性。 实时操作系统分为：1、硬实时系统——必须在绝对严格的规定时间内完成处理（如：导弹控制系统、自动驾驶系统）。2、软实时系统——能接受偶尔违反时间规定（如：12306火车订票系统）。 运行机制与体系结构 运行机制 两种指令：1、特权指令：如内存清零指令（不允许用户程序使用。）2、非特权指令：如普通的运算指令。 两种处理器状态（用程序状态字寄存器（PSW）中的某标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态)：1、用户态（目态）——此时CPU只执行非特权指令。2、核心态（管态）——特权指令、非特权指令都可以执行。 两种程序：1、内核程序——是系统的管理者，既可以执行特权指令，也可以执行非特权指令，运行在核心态。2、应用程序——为了保证系统能安全运行，普通应用程序只能执行非特权指令，运行在用户态。 操作系统的内核 内核是计算机上配置的底层软件，是操作系统最基本、最核心的部分。实现操作系统内核功能的那些程序就是内核程序。 操作系统的体系结构 中断和异常中断机制的诞生本质：发生中断就意味着需要操作系统介入，开展管理工作。 为了实现多道程序并发执行而引入的一种技术。 中断的概念和作用 当中断发生时，CPU立即进入核心态。 当中断发生后，当前运行的进程短暂运行，并由操作系统内核对中断进行处理。 对于不同的中断信号，会进行不同的处理。 “用户态—&gt;核心态”是通过中断实现的。并且中断是唯一途径。“核心态—&gt;用户态”的切换是通过执行一个特权指令，将程序状态字（PSW）的标志位设置为“用户态”。 中断的分类 内中断（也称异常、例外、陷入）：1、自愿中断——指令中断（如：系统调用时使用的访管指令（又叫陷入指令、trap指令））。2、强迫中断——硬件故障（如：缺页）、软件故障（如：整数除0）。 信号的来源：CPU内部，与当前执行的指令有关。 外中断（中断）：1、外设请求（如：I/O操作完成发出的中断信号）。2、人工干预（如：用户强行终止一个进程）。 信号的来源：CPU外部，与当前执行的指令无关。 另一种分类： 内中断（内部异常）：1、陷阱、陷入（trap）——有意而为之的异常，如系统调用。2、故障（fault）——由错误条件引起的，可能被故障处理程序修复，如缺页。3、终止（abort）——不可修复的致命错误造成的结果，终止处理程序不再将控制返回给引发终止的应用程序，如整数除0. 信号的来源：CPU内部，与当前执行的指令有关。 外中断（中断）：1、I/O中断请求。2、人工干预。 信号的来源：CPU外部，与当前执行的指令无关。 外中断的处理过程 执行完每个指令之后，CPU都要检查当前是否有外部中断信号。 如果检测到外部中断信号，则需要保护被中断进程的CPU环境（如程序状态字PSW、程序计数器PC、各种通用寄存器）。 根据中断信号类型转入相应的中断处理程序。 回复原进程的CPU环境并退出中断，返回原进程继续往下执行。 系统调用什么是系统调用，有何作用 概念：“系统调用”是操作系统提供给应用程序（程序员/编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。 作用：应用程序通过系统调用请求操作系统的服务。系统中的各种共享资源都由操作系统统一掌管，因此在用户程序中，愤怒时与资源有关的操作（如存储分配、I/O操作、文件管理等），都必须通过系统调用的方式向操作系统提出服务请求，由操作系统代为完成。这样可以保证系统的稳定性和安全性，防止用户进行非法操作。 系统调用（按功能分类）：1、设备管理——完成设备的请求/释放/启动等功能。2、文件管理——完成文件的读/写/创建/删除等功能。3、进程控制——完成进程的创建/撤销/阻塞/唤醒等功能。4、进程通信——完成进程之间的消息传递/信号传递等功能。5、内存管理——完成内存的分配/回收等功能。 系统调用相关处理涉及到对系统资源的管理、对进程的控制，这些功能需要一些特权指令才能完成，因此系统调用的相关处理需要在核心态下进行。 系统调用与库函数的区别","categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://amourlover.xyz/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"30种常见颜色代码","slug":"30种常见颜色代码","date":"2020-05-09T11:18:08.000Z","updated":"2020-05-11T14:02:09.830Z","comments":true,"path":"2020/05/09/30种常见颜色代码/","link":"","permalink":"http://amourlover.xyz/2020/05/09/30%E7%A7%8D%E5%B8%B8%E8%A7%81%E9%A2%9C%E8%89%B2%E4%BB%A3%E7%A0%81/","excerpt":"参考资料：百度百科-颜色码","text":"参考资料：百度百科-颜色码 浅粉色 #FFB6C1 粉红 FFC0CB 猩红 #DC143C 脸红的淡紫色 #FFF0F5 苍白的紫罗兰红色#DB7093 热情的粉红 #FF69B4 深粉色 #FF1493 适中的紫罗兰红色 #C71585 兰花的紫色 #DA70D6 蓟 #D8BFD8 李子 #DDA0DD 紫罗兰 #EE82EE 洋红 #FF00FF 灯笼海棠（紫红）#FF00FF 深洋红色 #8B008B 紫色 #800080 适中的兰花紫 #BA55D3 深紫罗兰色 #9400D3 深兰花紫 #9932CC 靛青 #4B0082 深紫罗兰的蓝色 #8A2BE2 适中的紫色 #9370DB 暗蓝灰色 #7B68EE 板岩暗蓝灰色 #6A5ACD 深岩暗蓝灰色 #483D8B 薰衣草花的淡紫色 #E6E6FA 幽灵的白色 #F8F8FF 纯蓝 #0000FF 适中的蓝色 #0000CD 午夜的蓝色 #191970 深蓝色 #00008B 海军蓝 #000080 宝蓝 #4169E1 矢车菊的蓝色 #6495ED 淡钢蓝 #B0C4DE 爱丽丝蓝 #F0F8FF 钢蓝 #4682B4 淡蓝色 #87CEFA 天蓝色 #87CEEB","categories":[],"tags":[{"name":"颜色代码","slug":"颜色代码","permalink":"http://amourlover.xyz/tags/%E9%A2%9C%E8%89%B2%E4%BB%A3%E7%A0%81/"}]},{"title":"接口和抽象类的区别是什么？","slug":"接口和抽象类的区别是什么？","date":"2020-05-06T10:41:49.000Z","updated":"2020-05-06T10:44:39.272Z","comments":true,"path":"2020/05/06/接口和抽象类的区别是什么？/","link":"","permalink":"http://amourlover.xyz/2020/05/06/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/","excerpt":"","text":"接口和抽象类的区别是什么？ 接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。 接口中除了 static、final 变量，不能有其他变量，而抽象类中则不一定。 一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过 extends 关键字扩展多个接口。 接口方法默认修饰符是 public，抽象方法可以有 public、protected 和 default 这些修饰符（抽象方法就是为了被重写所以不能使用 private 关键字修饰！）。 从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。 备注： 在 JDK8 中，接口也可以定义静态方法，可以直接用接口名调用。实现类和实现是不可以调用的。如果同时实现两个接口，接口中定义了一样的默认方法，则必须重写，不然会报错。(详见 issue:https://github.com/Snailclimb/JavaGuide/issues/146。 jdk9 的接口被允许定义私有方法 。 总结一下 jdk7~jdk9 Java 中接口概念的变化（相关阅读）： 在 jdk 7 或更早版本中，接口里面只能有常量变量和抽象方法。这些接口方法必须由选择实现接口的类实现。 jdk8 的时候接口可以有默认方法和静态方法功能。 Jdk 9 在接口中引入了私有方法和私有静态方法。","categories":[],"tags":[]},{"title":"Hexo-常用命令","slug":"Hexo-常用命令","date":"2020-05-06T10:15:10.000Z","updated":"2020-05-11T15:13:36.399Z","comments":true,"path":"2020/05/06/Hexo-常用命令/","link":"","permalink":"http://amourlover.xyz/2020/05/06/Hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"（1）$ hexo g或$ hexo generate 该命令执行后在hexo站点根目录下生成public文件夹 （2）$ hexo clean 把（1）中的public文件夹删除 （3）$ hexo s或$ hexo server 启动服务预览 （4）$ hexo d或$ hexo deploy 部署站点，在本地生成.deploy_git文件夹，并将编译后的文件上传至 GitHub。 （5）$ hexo new [layout] 例如：$ hexo new photo “my-first-blog” 上述指令执行时，Hexo 会尝试在 scaffolds 中寻找photo.md布局，若找到，则根据该布局新建文章；若未找到或指令中未指定该参数，则使用post.md新建文章。新建文章的名称在_config.yml中配置。 （6）删除文章 只需在本地把source/_posts文件夹下的文章源文件删除后，执行以下命令重新部署即可。 12$ hexo clean // 一定要先 clean，防止灵异事件发生$ hexo s 作者：四喜汤圆链接：https://www.jianshu.com/p/7ba00af8da13来源：简书","categories":[],"tags":[]},{"title":"重载和重写的区别","slug":"重载和重写的区别","date":"2020-05-06T09:29:39.000Z","updated":"2020-05-06T09:53:46.443Z","comments":true,"path":"2020/05/06/重载和重写的区别/","link":"","permalink":"http://amourlover.xyz/2020/05/06/%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理 重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法 区别点 重载方法 重写方法 发生范围 同一个类 子类 中 参数列表 必须修改 一定不能修改 返回类型 可修改 一定不能修改 异常 可修改 可以减少或删除，一定不能抛出新的或者更广的异常 访问修饰符 可修改 一定不能做更严格的限制（可以降低限制） 发生阶段 编译期 运行期","categories":[],"tags":[]},{"title":"Java和C++的区别","slug":"Java和C++的区别","date":"2020-05-06T08:51:36.000Z","updated":"2020-05-06T09:13:01.440Z","comments":true,"path":"2020/05/06/Java和C++的区别/","link":"","permalink":"http://amourlover.xyz/2020/05/06/Java%E5%92%8CC++%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"都是面向对象的语言，都支持封装、继承和多态 Java 不提供指针来直接访问内存，程序内存更加安全 Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。 Java 有自动内存管理机制，不需要程序员手动释放无用内存 在 C 语言中，字符串或字符数组最后都会有一个额外的字符‘\\0’来表示结束。但是，Java 语言中没有结束符这一概念。","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://amourlover.xyz/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"颜色代码","slug":"颜色代码","permalink":"http://amourlover.xyz/tags/%E9%A2%9C%E8%89%B2%E4%BB%A3%E7%A0%81/"}]}