{"meta":{"title":"Amour&R'blog","subtitle":"","description":"","author":"Amour&R","url":"http://amourlover.xyz","root":"/"},"pages":[{"title":"友情链接","date":"2020-11-17T04:46:20.742Z","updated":"2020-05-09T11:47:12.000Z","comments":true,"path":"friends/index.html","permalink":"http://amourlover.xyz/friends/index.html","excerpt":"","text":""}],"posts":[{"title":"Js四则运算类型转换","slug":"Js四则运算类型转换","date":"2020-11-30T12:31:48.000Z","updated":"2020-11-30T13:04:22.142Z","comments":true,"path":"2020/11/30/Js四则运算类型转换/","link":"","permalink":"http://amourlover.xyz/2020/11/30/Js%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/","excerpt":"四则运算中，当一个数值和一个字符串进行运算时，除了加号会把数值自动转换成字符串，其他的乘法，除法，减法，都会把字符串自动转化成数值。","text":"四则运算中，当一个数值和一个字符串进行运算时，除了加号会把数值自动转换成字符串，其他的乘法，除法，减法，都会把字符串自动转化成数值。 加法运算符不同于其他几个运算符，它有以下几个特点： 运算中其中一方为字符串，那么就会把另一方也转换成字符串 如果一方不是字符串或者数字，那么会将它转换为数字或者字符串 1231+'1' // '11'true+true // 24+[1,2,3] // '41,2,3' 另外&#39;a&#39;+ +&#39;b&#39;这种情况需要注意，两个+之间有空格，不然会报错。+变量类型会被转成Number类型。 1234'a'+ +'b' // aNaNconsole.log(+'b') // NaNconsole.log(+[1,2,3]) // NaNconsole.log(+'1') // 1","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://amourlover.xyz/tags/Javascript/"}]},{"title":"Js深拷贝与浅拷贝","slug":"Js深拷贝与浅拷贝","date":"2020-11-25T13:11:21.000Z","updated":"2020-11-25T13:47:42.233Z","comments":true,"path":"2020/11/25/Js深拷贝与浅拷贝/","link":"","permalink":"http://amourlover.xyz/2020/11/25/Js%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/","excerpt":"在vue项目中调用后端接口，传递参数时会发现本来传递的参数值全部重置，希望的情况是在参数传递给接口完成后，将参数重置。方法中的代码如下。 123456this.$store.dispatch('addUser',this.addUserInfo).then(()=&gt;&#123; console.log(this.addUserInfo) //对象中的元素值全是''&#125;)this.addUserInfo.userName = '',this.addUserInfo.userEmail = '',this.addUserInfo.userPassword = '',","text":"在vue项目中调用后端接口，传递参数时会发现本来传递的参数值全部重置，希望的情况是在参数传递给接口完成后，将参数重置。方法中的代码如下。 123456this.$store.dispatch('addUser',this.addUserInfo).then(()=&gt;&#123; console.log(this.addUserInfo) //对象中的元素值全是''&#125;)this.addUserInfo.userName = '',this.addUserInfo.userEmail = '',this.addUserInfo.userPassword = '', JavaScript的两种变量类型 JavaScript变量的类型分为两种， 基本类型和引用类型，其中基本类型是指简单的数据段，有5种 ： Undefined、 Null、 Boolean、 Number 和 String。引用类型是指可能有多个值构成的对象，一般为： Object, Array, function 等。 为什么要先说变量类型呢，是因为基本类型是按值访问的，不会影响到其他数据。所以基本类型的值没有深拷贝的概念。 而引用类型的值是按地址访问的，简单的赋值，实际上只是把地址复制了一遍，修改任意一个值会影响到另外一个。 上面的this.addUserInfo是对象，是按地址访问的，所以在接口里面返回参数时显示的是重置之后的对象，这中间还涉及到同步异步的问题。 什么是深拷贝浅拷贝 所以浅拷贝和深拷贝（也叫浅复制和深复制）的概括解释为： 对基本类型变量，浅拷贝是对值的拷贝，没有深拷贝的概念。 对引用类型来说，浅拷贝是对对象地址的拷贝，并没有开辟新的栈，复制的结果是两个对象指向同一个地址，修改其中一个对象的属性，另外一个对象的属性也会改变， 而深拷贝则是开辟新的栈。 深拷贝的实现 转JSON再解析回来 原理： 用JSON.stringify将对象转成JSON字符串，再用JSON.parse()把字符串解析成对象，一来一回之间，新的对象产生了，而且对象会开辟新的栈，实现深拷贝 1234567this.$store.dispatch('addUser',JSON.parse(JSON.stringify(this.addUserInfo))).then(()=&gt;&#123; console.log(this.addUserInfo) //这时候就是写入的参数了&#125;)this.addUserInfo.userName = '',this.addUserInfo.userEmail = '',this.addUserInfo.userPassword = '',this.addUserDialog = false","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://amourlover.xyz/tags/JavaScript/"}]},{"title":"'v-slot' directive doesn't support any modifier","slug":"UserAdmin-vue中v-slot作用域插槽遇到的问题","date":"2020-11-24T13:52:23.000Z","updated":"2020-11-24T14:43:38.647Z","comments":true,"path":"2020/11/24/UserAdmin-vue中v-slot作用域插槽遇到的问题/","link":"","permalink":"http://amourlover.xyz/2020/11/24/UserAdmin-vue%E4%B8%ADv-slot%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/","excerpt":"UserAdmin.vue中v-slot作用域插槽问题。在Vuetify中的使用中遇到了一个bug，但是不会对项目的运行有影响","text":"UserAdmin.vue中v-slot作用域插槽问题。在Vuetify中的使用中遇到了一个bug，但是不会对项目的运行有影响 链接：数据表组件—Vuetify.js 123456789101112131415&lt;template v-slot:item.actions&#x3D;&quot;&#123; item &#125;&quot;&gt;&lt;v-icon small class&#x3D;&quot;mr-2&quot; @click&#x3D;&quot;editItem(item)&quot; &gt; mdi-pencil &lt;&#x2F;v-icon&gt;&lt;v-icon small @click&#x3D;&quot;deleteItem(item)&quot; &gt; mdi-delete &lt;&#x2F;v-icon&gt;&lt;&#x2F;template&gt; 在v-slot:item.actions=&quot;{ item }&quot;上提示’v-slot’ directive doesn’t support any modifier错误 将v-slot:item.actions=&quot;{ item }&quot;改成v-slot:[`item.actions`]=&quot;{ item }]&quot;错误就消失了。 为什么会这样，我暂时还没搞懂。","categories":[],"tags":[{"name":"v-slot","slug":"v-slot","permalink":"http://amourlover.xyz/tags/v-slot/"}]},{"title":"IP基础知识","slug":"IP基础知识","date":"2020-05-11T13:56:21.000Z","updated":"2020-11-24T14:37:13.088Z","comments":true,"path":"2020/05/11/IP基础知识/","link":"","permalink":"http://amourlover.xyz/2020/05/11/IP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"","text":"https://mp.weixin.qq.com/s/qydIO7NDfFTYs4-ZZlfgRg 这是我在微信公众号上看到的一篇文章。","categories":[],"tags":[{"name":"ip","slug":"ip","permalink":"http://amourlover.xyz/tags/ip/"}]},{"title":"Hexo-常用命令","slug":"Hexo-常用命令","date":"2020-05-06T10:15:10.000Z","updated":"2020-05-26T13:52:02.000Z","comments":true,"path":"2020/05/06/Hexo-常用命令/","link":"","permalink":"http://amourlover.xyz/2020/05/06/Hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"（1）$ hexo g或$ hexo generate 该命令执行后在hexo站点根目录下生成public文件夹 （2）$ hexo clean 把（1）中的public文件夹删除 （3）$ hexo s或$ hexo server 启动服务预览 （4）$ hexo d或$ hexo deploy 部署站点，在本地生成.deploy_git文件夹，并将编译后的文件上传至 GitHub。 （5）$ hexo new [layout] 例如：$ hexo new photo “my-first-blog” 上述指令执行时，Hexo 会尝试在 scaffolds 中寻找photo.md布局，若找到，则根据该布局新建文章；若未找到或指令中未指定该参数，则使用post.md新建文章。新建文章的名称在_config.yml中配置。 （6）删除文章 只需在本地把source/_posts文件夹下的文章源文件删除后，执行以下命令重新部署即可。 12$ hexo clean // 一定要先 clean，防止灵异事件发生$ hexo s 作者：四喜汤圆链接：https://www.jianshu.com/p/7ba00af8da13来源：简书","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://amourlover.xyz/tags/Javascript/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://amourlover.xyz/tags/JavaScript/"},{"name":"v-slot","slug":"v-slot","permalink":"http://amourlover.xyz/tags/v-slot/"},{"name":"ip","slug":"ip","permalink":"http://amourlover.xyz/tags/ip/"}]}